
STM32_bootloader_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a48  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c0c  08003c0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003c0c  08003c0c  00013c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c14  08003c14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c14  08003c14  00013c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000c3f0  20000010  20000010  00020010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2000c400  2000c400  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a0f6  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000021df  00000000  00000000  0002a175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000930  00000000  00000000  0002c358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006f7  00000000  00000000  0002cc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000226c4  00000000  00000000  0002d37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000c80b  00000000  00000000  0004fa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce529  00000000  00000000  0005c24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002394  00000000  00000000  0012a778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0012cb0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003bdc 	.word	0x08003bdc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003bdc 	.word	0x08003bdc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <fileCompile>:
uint64_t bytesSum;

uint8_t ledcounter;


void fileCompile (char firmwareByte) { //
 80004e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004ec:	b097      	sub	sp, #92	; 0x5c
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	4603      	mov	r3, r0
 80004f2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (ledcounter == 0xFF) HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004f6:	4bab      	ldr	r3, [pc, #684]	; (80007a4 <fileCompile+0x2bc>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2bff      	cmp	r3, #255	; 0xff
 80004fc:	d104      	bne.n	8000508 <fileCompile+0x20>
 80004fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000502:	48a9      	ldr	r0, [pc, #676]	; (80007a8 <fileCompile+0x2c0>)
 8000504:	f001 fe5b 	bl	80021be <HAL_GPIO_TogglePin>
	ledcounter++;
 8000508:	4ba6      	ldr	r3, [pc, #664]	; (80007a4 <fileCompile+0x2bc>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	3301      	adds	r3, #1
 800050e:	b2db      	uxtb	r3, r3
 8000510:	4aa4      	ldr	r2, [pc, #656]	; (80007a4 <fileCompile+0x2bc>)
 8000512:	7013      	strb	r3, [r2, #0]

	if (firmwareByte == ':') {
 8000514:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000518:	2b3a      	cmp	r3, #58	; 0x3a
 800051a:	d111      	bne.n	8000540 <fileCompile+0x58>

		whichLine++;
 800051c:	4ba3      	ldr	r3, [pc, #652]	; (80007ac <fileCompile+0x2c4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	4ba2      	ldr	r3, [pc, #648]	; (80007ac <fileCompile+0x2c4>)
 8000524:	601a      	str	r2, [r3, #0]
		bytesSum = 0;
 8000526:	49a2      	ldr	r1, [pc, #648]	; (80007b0 <fileCompile+0x2c8>)
 8000528:	f04f 0200 	mov.w	r2, #0
 800052c:	f04f 0300 	mov.w	r3, #0
 8000530:	e9c1 2300 	strd	r2, r3, [r1]
		byteCounter = 0;
 8000534:	4a9f      	ldr	r2, [pc, #636]	; (80007b4 <fileCompile+0x2cc>)
 8000536:	2300      	movs	r3, #0
 8000538:	7013      	strb	r3, [r2, #0]
		sign = 0;
 800053a:	4a9f      	ldr	r2, [pc, #636]	; (80007b8 <fileCompile+0x2d0>)
 800053c:	2300      	movs	r3, #0
 800053e:	7013      	strb	r3, [r2, #0]
	}

	switch (sign) {
 8000540:	4b9d      	ldr	r3, [pc, #628]	; (80007b8 <fileCompile+0x2d0>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b0c      	cmp	r3, #12
 8000546:	f200 829e 	bhi.w	8000a86 <fileCompile+0x59e>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <fileCompile+0x68>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000585 	.word	0x08000585
 8000554:	080005a1 	.word	0x080005a1
 8000558:	080005bf 	.word	0x080005bf
 800055c:	0800064f 	.word	0x0800064f
 8000560:	0800066d 	.word	0x0800066d
 8000564:	080006eb 	.word	0x080006eb
 8000568:	08000709 	.word	0x08000709
 800056c:	08000787 	.word	0x08000787
 8000570:	080007c5 	.word	0x080007c5
 8000574:	0800085d 	.word	0x0800085d
 8000578:	080009ad 	.word	0x080009ad
 800057c:	080009d3 	.word	0x080009d3
 8000580:	08000a81 	.word	0x08000a81
		case 0: // ':'
			firmware[whichLine][0] = firmwareByte;
 8000584:	4b89      	ldr	r3, [pc, #548]	; (80007ac <fileCompile+0x2c4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a8c      	ldr	r2, [pc, #560]	; (80007bc <fileCompile+0x2d4>)
 800058a:	2132      	movs	r1, #50	; 0x32
 800058c:	fb01 f303 	mul.w	r3, r1, r3
 8000590:	4413      	add	r3, r2
 8000592:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000596:	701a      	strb	r2, [r3, #0]
			sign = 1;
 8000598:	4b87      	ldr	r3, [pc, #540]	; (80007b8 <fileCompile+0x2d0>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
			break;
 800059e:	e272      	b.n	8000a86 <fileCompile+0x59e>
		case 1: // length 1
			firmware[whichLine][1] = firmwareByte;
 80005a0:	4b82      	ldr	r3, [pc, #520]	; (80007ac <fileCompile+0x2c4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a85      	ldr	r2, [pc, #532]	; (80007bc <fileCompile+0x2d4>)
 80005a6:	2132      	movs	r1, #50	; 0x32
 80005a8:	fb01 f303 	mul.w	r3, r1, r3
 80005ac:	4413      	add	r3, r2
 80005ae:	3301      	adds	r3, #1
 80005b0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005b4:	701a      	strb	r2, [r3, #0]
			sign = 2;
 80005b6:	4b80      	ldr	r3, [pc, #512]	; (80007b8 <fileCompile+0x2d0>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	701a      	strb	r2, [r3, #0]
			break;
 80005bc:	e263      	b.n	8000a86 <fileCompile+0x59e>
		case 2: // length 2
			firmware[whichLine][2] = firmwareByte;
 80005be:	4b7b      	ldr	r3, [pc, #492]	; (80007ac <fileCompile+0x2c4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a7e      	ldr	r2, [pc, #504]	; (80007bc <fileCompile+0x2d4>)
 80005c4:	2132      	movs	r1, #50	; 0x32
 80005c6:	fb01 f303 	mul.w	r3, r1, r3
 80005ca:	4413      	add	r3, r2
 80005cc:	3302      	adds	r3, #2
 80005ce:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80005d2:	701a      	strb	r2, [r3, #0]
			length = ((hexCharToUint(firmware[(whichLine)][1]) << 4) | (hexCharToUint(firmware[(whichLine)][2])));
 80005d4:	4b75      	ldr	r3, [pc, #468]	; (80007ac <fileCompile+0x2c4>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a78      	ldr	r2, [pc, #480]	; (80007bc <fileCompile+0x2d4>)
 80005da:	2132      	movs	r1, #50	; 0x32
 80005dc:	fb01 f303 	mul.w	r3, r1, r3
 80005e0:	4413      	add	r3, r2
 80005e2:	3301      	adds	r3, #1
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	4618      	mov	r0, r3
 80005e8:	f000 fc3e 	bl	8000e68 <hexCharToUint>
 80005ec:	4603      	mov	r3, r0
 80005ee:	011b      	lsls	r3, r3, #4
 80005f0:	b25c      	sxtb	r4, r3
 80005f2:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <fileCompile+0x2c4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a71      	ldr	r2, [pc, #452]	; (80007bc <fileCompile+0x2d4>)
 80005f8:	2132      	movs	r1, #50	; 0x32
 80005fa:	fb01 f303 	mul.w	r3, r1, r3
 80005fe:	4413      	add	r3, r2
 8000600:	3302      	adds	r3, #2
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	4618      	mov	r0, r3
 8000606:	f000 fc2f 	bl	8000e68 <hexCharToUint>
 800060a:	4603      	mov	r3, r0
 800060c:	b25b      	sxtb	r3, r3
 800060e:	4323      	orrs	r3, r4
 8000610:	b25b      	sxtb	r3, r3
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b6a      	ldr	r3, [pc, #424]	; (80007c0 <fileCompile+0x2d8>)
 8000616:	701a      	strb	r2, [r3, #0]
			bytesSum = bytesSum + length;
 8000618:	4b69      	ldr	r3, [pc, #420]	; (80007c0 <fileCompile+0x2d8>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2200      	movs	r2, #0
 8000620:	643b      	str	r3, [r7, #64]	; 0x40
 8000622:	647a      	str	r2, [r7, #68]	; 0x44
 8000624:	4b62      	ldr	r3, [pc, #392]	; (80007b0 <fileCompile+0x2c8>)
 8000626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800062a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800062e:	4621      	mov	r1, r4
 8000630:	1889      	adds	r1, r1, r2
 8000632:	63b9      	str	r1, [r7, #56]	; 0x38
 8000634:	4629      	mov	r1, r5
 8000636:	eb43 0101 	adc.w	r1, r3, r1
 800063a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800063c:	4b5c      	ldr	r3, [pc, #368]	; (80007b0 <fileCompile+0x2c8>)
 800063e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8000642:	e9c3 1200 	strd	r1, r2, [r3]
			sign = 3;
 8000646:	4b5c      	ldr	r3, [pc, #368]	; (80007b8 <fileCompile+0x2d0>)
 8000648:	2203      	movs	r2, #3
 800064a:	701a      	strb	r2, [r3, #0]
			break;
 800064c:	e21b      	b.n	8000a86 <fileCompile+0x59e>
		case 3: //address 1
			firmware[whichLine][3] = firmwareByte;
 800064e:	4b57      	ldr	r3, [pc, #348]	; (80007ac <fileCompile+0x2c4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a5a      	ldr	r2, [pc, #360]	; (80007bc <fileCompile+0x2d4>)
 8000654:	2132      	movs	r1, #50	; 0x32
 8000656:	fb01 f303 	mul.w	r3, r1, r3
 800065a:	4413      	add	r3, r2
 800065c:	3303      	adds	r3, #3
 800065e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000662:	701a      	strb	r2, [r3, #0]
			sign = 4;
 8000664:	4b54      	ldr	r3, [pc, #336]	; (80007b8 <fileCompile+0x2d0>)
 8000666:	2204      	movs	r2, #4
 8000668:	701a      	strb	r2, [r3, #0]
			break;
 800066a:	e20c      	b.n	8000a86 <fileCompile+0x59e>
		case 4: //address 2
			firmware[whichLine][4] = firmwareByte;
 800066c:	4b4f      	ldr	r3, [pc, #316]	; (80007ac <fileCompile+0x2c4>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a52      	ldr	r2, [pc, #328]	; (80007bc <fileCompile+0x2d4>)
 8000672:	2132      	movs	r1, #50	; 0x32
 8000674:	fb01 f303 	mul.w	r3, r1, r3
 8000678:	4413      	add	r3, r2
 800067a:	3304      	adds	r3, #4
 800067c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000680:	701a      	strb	r2, [r3, #0]
			bytesSum = bytesSum + ((hexCharToUint(firmware[whichLine][3]) << 4) | (hexCharToUint(firmware[whichLine][4])));
 8000682:	4b4a      	ldr	r3, [pc, #296]	; (80007ac <fileCompile+0x2c4>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a4d      	ldr	r2, [pc, #308]	; (80007bc <fileCompile+0x2d4>)
 8000688:	2132      	movs	r1, #50	; 0x32
 800068a:	fb01 f303 	mul.w	r3, r1, r3
 800068e:	4413      	add	r3, r2
 8000690:	3303      	adds	r3, #3
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fbe7 	bl	8000e68 <hexCharToUint>
 800069a:	4603      	mov	r3, r0
 800069c:	011c      	lsls	r4, r3, #4
 800069e:	4b43      	ldr	r3, [pc, #268]	; (80007ac <fileCompile+0x2c4>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a46      	ldr	r2, [pc, #280]	; (80007bc <fileCompile+0x2d4>)
 80006a4:	2132      	movs	r1, #50	; 0x32
 80006a6:	fb01 f303 	mul.w	r3, r1, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	3304      	adds	r3, #4
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fbd9 	bl	8000e68 <hexCharToUint>
 80006b6:	4603      	mov	r3, r0
 80006b8:	4323      	orrs	r3, r4
 80006ba:	17da      	asrs	r2, r3, #31
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
 80006be:	637a      	str	r2, [r7, #52]	; 0x34
 80006c0:	4b3b      	ldr	r3, [pc, #236]	; (80007b0 <fileCompile+0x2c8>)
 80006c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80006ca:	4621      	mov	r1, r4
 80006cc:	1889      	adds	r1, r1, r2
 80006ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80006d0:	4629      	mov	r1, r5
 80006d2:	eb43 0101 	adc.w	r1, r3, r1
 80006d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80006d8:	4b35      	ldr	r3, [pc, #212]	; (80007b0 <fileCompile+0x2c8>)
 80006da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80006de:	e9c3 1200 	strd	r1, r2, [r3]
			sign = 5;
 80006e2:	4b35      	ldr	r3, [pc, #212]	; (80007b8 <fileCompile+0x2d0>)
 80006e4:	2205      	movs	r2, #5
 80006e6:	701a      	strb	r2, [r3, #0]
			break;
 80006e8:	e1cd      	b.n	8000a86 <fileCompile+0x59e>
		case 5: //address 3
			firmware[whichLine][5] = firmwareByte;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <fileCompile+0x2c4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a33      	ldr	r2, [pc, #204]	; (80007bc <fileCompile+0x2d4>)
 80006f0:	2132      	movs	r1, #50	; 0x32
 80006f2:	fb01 f303 	mul.w	r3, r1, r3
 80006f6:	4413      	add	r3, r2
 80006f8:	3305      	adds	r3, #5
 80006fa:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80006fe:	701a      	strb	r2, [r3, #0]
			sign = 6;
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <fileCompile+0x2d0>)
 8000702:	2206      	movs	r2, #6
 8000704:	701a      	strb	r2, [r3, #0]
			break;
 8000706:	e1be      	b.n	8000a86 <fileCompile+0x59e>
		case 6: ///address 4
			firmware[whichLine][6] = firmwareByte;
 8000708:	4b28      	ldr	r3, [pc, #160]	; (80007ac <fileCompile+0x2c4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a2b      	ldr	r2, [pc, #172]	; (80007bc <fileCompile+0x2d4>)
 800070e:	2132      	movs	r1, #50	; 0x32
 8000710:	fb01 f303 	mul.w	r3, r1, r3
 8000714:	4413      	add	r3, r2
 8000716:	3306      	adds	r3, #6
 8000718:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800071c:	701a      	strb	r2, [r3, #0]
			bytesSum = bytesSum + ((hexCharToUint(firmware[whichLine][5]) << 4) | (hexCharToUint(firmware[whichLine][6])));
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <fileCompile+0x2c4>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4a26      	ldr	r2, [pc, #152]	; (80007bc <fileCompile+0x2d4>)
 8000724:	2132      	movs	r1, #50	; 0x32
 8000726:	fb01 f303 	mul.w	r3, r1, r3
 800072a:	4413      	add	r3, r2
 800072c:	3305      	adds	r3, #5
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fb99 	bl	8000e68 <hexCharToUint>
 8000736:	4603      	mov	r3, r0
 8000738:	011c      	lsls	r4, r3, #4
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <fileCompile+0x2c4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a1f      	ldr	r2, [pc, #124]	; (80007bc <fileCompile+0x2d4>)
 8000740:	2132      	movs	r1, #50	; 0x32
 8000742:	fb01 f303 	mul.w	r3, r1, r3
 8000746:	4413      	add	r3, r2
 8000748:	3306      	adds	r3, #6
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fb8b 	bl	8000e68 <hexCharToUint>
 8000752:	4603      	mov	r3, r0
 8000754:	4323      	orrs	r3, r4
 8000756:	17da      	asrs	r2, r3, #31
 8000758:	623b      	str	r3, [r7, #32]
 800075a:	627a      	str	r2, [r7, #36]	; 0x24
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <fileCompile+0x2c8>)
 800075e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000762:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000766:	4621      	mov	r1, r4
 8000768:	1889      	adds	r1, r1, r2
 800076a:	61b9      	str	r1, [r7, #24]
 800076c:	4629      	mov	r1, r5
 800076e:	eb43 0101 	adc.w	r1, r3, r1
 8000772:	61f9      	str	r1, [r7, #28]
 8000774:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <fileCompile+0x2c8>)
 8000776:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800077a:	e9c3 1200 	strd	r1, r2, [r3]
			sign = 7;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <fileCompile+0x2d0>)
 8000780:	2207      	movs	r2, #7
 8000782:	701a      	strb	r2, [r3, #0]
			break;
 8000784:	e17f      	b.n	8000a86 <fileCompile+0x59e>
		case 7: //type 1
			firmware[whichLine][7] = firmwareByte;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <fileCompile+0x2c4>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <fileCompile+0x2d4>)
 800078c:	2132      	movs	r1, #50	; 0x32
 800078e:	fb01 f303 	mul.w	r3, r1, r3
 8000792:	4413      	add	r3, r2
 8000794:	3307      	adds	r3, #7
 8000796:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800079a:	701a      	strb	r2, [r3, #0]
			sign = 8;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <fileCompile+0x2d0>)
 800079e:	2208      	movs	r2, #8
 80007a0:	701a      	strb	r2, [r3, #0]
			break;
 80007a2:	e170      	b.n	8000a86 <fileCompile+0x59e>
 80007a4:	2000c390 	.word	0x2000c390
 80007a8:	40021800 	.word	0x40021800
 80007ac:	2000c384 	.word	0x2000c384
 80007b0:	2000c388 	.word	0x2000c388
 80007b4:	2000c37e 	.word	0x2000c37e
 80007b8:	2000c37c 	.word	0x2000c37c
 80007bc:	2000002c 	.word	0x2000002c
 80007c0:	2000c37d 	.word	0x2000c37d
		case 8: //type 2
			firmware[whichLine][8] = firmwareByte;
 80007c4:	4bb2      	ldr	r3, [pc, #712]	; (8000a90 <fileCompile+0x5a8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4ab2      	ldr	r2, [pc, #712]	; (8000a94 <fileCompile+0x5ac>)
 80007ca:	2132      	movs	r1, #50	; 0x32
 80007cc:	fb01 f303 	mul.w	r3, r1, r3
 80007d0:	4413      	add	r3, r2
 80007d2:	3308      	adds	r3, #8
 80007d4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80007d8:	701a      	strb	r2, [r3, #0]
			hex_type = (hexCharToUint(firmware[whichLine][7]) << 4) | (hexCharToUint(firmware[whichLine][8]));
 80007da:	4bad      	ldr	r3, [pc, #692]	; (8000a90 <fileCompile+0x5a8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4aad      	ldr	r2, [pc, #692]	; (8000a94 <fileCompile+0x5ac>)
 80007e0:	2132      	movs	r1, #50	; 0x32
 80007e2:	fb01 f303 	mul.w	r3, r1, r3
 80007e6:	4413      	add	r3, r2
 80007e8:	3307      	adds	r3, #7
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fb3b 	bl	8000e68 <hexCharToUint>
 80007f2:	4603      	mov	r3, r0
 80007f4:	011b      	lsls	r3, r3, #4
 80007f6:	b21c      	sxth	r4, r3
 80007f8:	4ba5      	ldr	r3, [pc, #660]	; (8000a90 <fileCompile+0x5a8>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4aa5      	ldr	r2, [pc, #660]	; (8000a94 <fileCompile+0x5ac>)
 80007fe:	2132      	movs	r1, #50	; 0x32
 8000800:	fb01 f303 	mul.w	r3, r1, r3
 8000804:	4413      	add	r3, r2
 8000806:	3308      	adds	r3, #8
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fb2c 	bl	8000e68 <hexCharToUint>
 8000810:	4603      	mov	r3, r0
 8000812:	b21b      	sxth	r3, r3
 8000814:	4323      	orrs	r3, r4
 8000816:	b21b      	sxth	r3, r3
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b9f      	ldr	r3, [pc, #636]	; (8000a98 <fileCompile+0x5b0>)
 800081c:	801a      	strh	r2, [r3, #0]
			bytesSum = bytesSum + hex_type;
 800081e:	4b9e      	ldr	r3, [pc, #632]	; (8000a98 <fileCompile+0x5b0>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	2200      	movs	r2, #0
 8000826:	461d      	mov	r5, r3
 8000828:	4616      	mov	r6, r2
 800082a:	4b9c      	ldr	r3, [pc, #624]	; (8000a9c <fileCompile+0x5b4>)
 800082c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000830:	18a9      	adds	r1, r5, r2
 8000832:	6139      	str	r1, [r7, #16]
 8000834:	eb46 0303 	adc.w	r3, r6, r3
 8000838:	617b      	str	r3, [r7, #20]
 800083a:	4b98      	ldr	r3, [pc, #608]	; (8000a9c <fileCompile+0x5b4>)
 800083c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000840:	e9c3 1200 	strd	r1, r2, [r3]
			sign = 9;
 8000844:	4b96      	ldr	r3, [pc, #600]	; (8000aa0 <fileCompile+0x5b8>)
 8000846:	2209      	movs	r2, #9
 8000848:	701a      	strb	r2, [r3, #0]
			if (length == 0) sign = 10; //Only for end type, without any data
 800084a:	4b96      	ldr	r3, [pc, #600]	; (8000aa4 <fileCompile+0x5bc>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	f040 8118 	bne.w	8000a84 <fileCompile+0x59c>
 8000854:	4b92      	ldr	r3, [pc, #584]	; (8000aa0 <fileCompile+0x5b8>)
 8000856:	220a      	movs	r2, #10
 8000858:	701a      	strb	r2, [r3, #0]
			break;
 800085a:	e113      	b.n	8000a84 <fileCompile+0x59c>
		case 9: //data

			if (byteCounter != (2*length - 1)) {
 800085c:	4b92      	ldr	r3, [pc, #584]	; (8000aa8 <fileCompile+0x5c0>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	461a      	mov	r2, r3
 8000862:	4b90      	ldr	r3, [pc, #576]	; (8000aa4 <fileCompile+0x5bc>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	3b01      	subs	r3, #1
 800086a:	429a      	cmp	r2, r3
 800086c:	d047      	beq.n	80008fe <fileCompile+0x416>
				firmware[whichLine][9+byteCounter] = firmwareByte;
 800086e:	4b88      	ldr	r3, [pc, #544]	; (8000a90 <fileCompile+0x5a8>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	4b8d      	ldr	r3, [pc, #564]	; (8000aa8 <fileCompile+0x5c0>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	3309      	adds	r3, #9
 8000878:	4986      	ldr	r1, [pc, #536]	; (8000a94 <fileCompile+0x5ac>)
 800087a:	2032      	movs	r0, #50	; 0x32
 800087c:	fb00 f202 	mul.w	r2, r0, r2
 8000880:	440a      	add	r2, r1
 8000882:	4413      	add	r3, r2
 8000884:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8000888:	701a      	strb	r2, [r3, #0]
				if (byteCounter % 2 != 0)
 800088a:	4b87      	ldr	r3, [pc, #540]	; (8000aa8 <fileCompile+0x5c0>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d032      	beq.n	80008fe <fileCompile+0x416>
					bytesSum = bytesSum + ((hexCharToUint(firmware[whichLine][8+byteCounter]) << 4) | (hexCharToUint(firmware[whichLine][9+byteCounter])));
 8000898:	4b7d      	ldr	r3, [pc, #500]	; (8000a90 <fileCompile+0x5a8>)
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b82      	ldr	r3, [pc, #520]	; (8000aa8 <fileCompile+0x5c0>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	3308      	adds	r3, #8
 80008a2:	497c      	ldr	r1, [pc, #496]	; (8000a94 <fileCompile+0x5ac>)
 80008a4:	2032      	movs	r0, #50	; 0x32
 80008a6:	fb00 f202 	mul.w	r2, r0, r2
 80008aa:	440a      	add	r2, r1
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fad9 	bl	8000e68 <hexCharToUint>
 80008b6:	4603      	mov	r3, r0
 80008b8:	011c      	lsls	r4, r3, #4
 80008ba:	4b75      	ldr	r3, [pc, #468]	; (8000a90 <fileCompile+0x5a8>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b7a      	ldr	r3, [pc, #488]	; (8000aa8 <fileCompile+0x5c0>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	3309      	adds	r3, #9
 80008c4:	4973      	ldr	r1, [pc, #460]	; (8000a94 <fileCompile+0x5ac>)
 80008c6:	2032      	movs	r0, #50	; 0x32
 80008c8:	fb00 f202 	mul.w	r2, r0, r2
 80008cc:	440a      	add	r2, r1
 80008ce:	4413      	add	r3, r2
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 fac8 	bl	8000e68 <hexCharToUint>
 80008d8:	4603      	mov	r3, r0
 80008da:	4323      	orrs	r3, r4
 80008dc:	17da      	asrs	r2, r3, #31
 80008de:	469a      	mov	sl, r3
 80008e0:	4693      	mov	fp, r2
 80008e2:	4b6e      	ldr	r3, [pc, #440]	; (8000a9c <fileCompile+0x5b4>)
 80008e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e8:	eb1a 0102 	adds.w	r1, sl, r2
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	eb4b 0303 	adc.w	r3, fp, r3
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	4b69      	ldr	r3, [pc, #420]	; (8000a9c <fileCompile+0x5b4>)
 80008f6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80008fa:	e9c3 1200 	strd	r1, r2, [r3]
			}
			if (byteCounter == (2*length - 1)) {
 80008fe:	4b6a      	ldr	r3, [pc, #424]	; (8000aa8 <fileCompile+0x5c0>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	461a      	mov	r2, r3
 8000904:	4b67      	ldr	r3, [pc, #412]	; (8000aa4 <fileCompile+0x5bc>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	3b01      	subs	r3, #1
 800090c:	429a      	cmp	r2, r3
 800090e:	d146      	bne.n	800099e <fileCompile+0x4b6>
				firmware[whichLine][9+byteCounter] = firmwareByte;
 8000910:	4b5f      	ldr	r3, [pc, #380]	; (8000a90 <fileCompile+0x5a8>)
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b64      	ldr	r3, [pc, #400]	; (8000aa8 <fileCompile+0x5c0>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	3309      	adds	r3, #9
 800091a:	495e      	ldr	r1, [pc, #376]	; (8000a94 <fileCompile+0x5ac>)
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	fb00 f202 	mul.w	r2, r0, r2
 8000922:	440a      	add	r2, r1
 8000924:	4413      	add	r3, r2
 8000926:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800092a:	701a      	strb	r2, [r3, #0]
				bytesSum = bytesSum + ((hexCharToUint(firmware[whichLine][8+byteCounter]) << 4) | (hexCharToUint(firmware[whichLine][9+byteCounter])));
 800092c:	4b58      	ldr	r3, [pc, #352]	; (8000a90 <fileCompile+0x5a8>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b5d      	ldr	r3, [pc, #372]	; (8000aa8 <fileCompile+0x5c0>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	3308      	adds	r3, #8
 8000936:	4957      	ldr	r1, [pc, #348]	; (8000a94 <fileCompile+0x5ac>)
 8000938:	2032      	movs	r0, #50	; 0x32
 800093a:	fb00 f202 	mul.w	r2, r0, r2
 800093e:	440a      	add	r2, r1
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fa8f 	bl	8000e68 <hexCharToUint>
 800094a:	4603      	mov	r3, r0
 800094c:	011c      	lsls	r4, r3, #4
 800094e:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <fileCompile+0x5a8>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b55      	ldr	r3, [pc, #340]	; (8000aa8 <fileCompile+0x5c0>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	3309      	adds	r3, #9
 8000958:	494e      	ldr	r1, [pc, #312]	; (8000a94 <fileCompile+0x5ac>)
 800095a:	2032      	movs	r0, #50	; 0x32
 800095c:	fb00 f202 	mul.w	r2, r0, r2
 8000960:	440a      	add	r2, r1
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f000 fa7e 	bl	8000e68 <hexCharToUint>
 800096c:	4603      	mov	r3, r0
 800096e:	4323      	orrs	r3, r4
 8000970:	17da      	asrs	r2, r3, #31
 8000972:	4698      	mov	r8, r3
 8000974:	4691      	mov	r9, r2
 8000976:	4b49      	ldr	r3, [pc, #292]	; (8000a9c <fileCompile+0x5b4>)
 8000978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800097c:	eb18 0102 	adds.w	r1, r8, r2
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	eb49 0303 	adc.w	r3, r9, r3
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <fileCompile+0x5b4>)
 800098a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800098e:	e9c3 1200 	strd	r1, r2, [r3]
				byteCounter = 0;
 8000992:	4b45      	ldr	r3, [pc, #276]	; (8000aa8 <fileCompile+0x5c0>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
				sign = 10;
 8000998:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <fileCompile+0x5b8>)
 800099a:	220a      	movs	r2, #10
 800099c:	701a      	strb	r2, [r3, #0]
			}
			byteCounter++;
 800099e:	4b42      	ldr	r3, [pc, #264]	; (8000aa8 <fileCompile+0x5c0>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b40      	ldr	r3, [pc, #256]	; (8000aa8 <fileCompile+0x5c0>)
 80009a8:	701a      	strb	r2, [r3, #0]
			break;
 80009aa:	e06c      	b.n	8000a86 <fileCompile+0x59e>
		case 10: //checksum1
			firmware[whichLine][(9 + 2*length)] = firmwareByte;
 80009ac:	4b38      	ldr	r3, [pc, #224]	; (8000a90 <fileCompile+0x5a8>)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <fileCompile+0x5bc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	3309      	adds	r3, #9
 80009b8:	4936      	ldr	r1, [pc, #216]	; (8000a94 <fileCompile+0x5ac>)
 80009ba:	2032      	movs	r0, #50	; 0x32
 80009bc:	fb00 f202 	mul.w	r2, r0, r2
 80009c0:	440a      	add	r2, r1
 80009c2:	4413      	add	r3, r2
 80009c4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80009c8:	701a      	strb	r2, [r3, #0]
			sign = 11;
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <fileCompile+0x5b8>)
 80009cc:	220b      	movs	r2, #11
 80009ce:	701a      	strb	r2, [r3, #0]
			break;
 80009d0:	e059      	b.n	8000a86 <fileCompile+0x59e>
		case 11: //checksum2
			firmware[whichLine][(10 + 2*length)] = firmwareByte;
 80009d2:	4b2f      	ldr	r3, [pc, #188]	; (8000a90 <fileCompile+0x5a8>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <fileCompile+0x5bc>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3305      	adds	r3, #5
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	492d      	ldr	r1, [pc, #180]	; (8000a94 <fileCompile+0x5ac>)
 80009e0:	2032      	movs	r0, #50	; 0x32
 80009e2:	fb00 f202 	mul.w	r2, r0, r2
 80009e6:	440a      	add	r2, r1
 80009e8:	4413      	add	r3, r2
 80009ea:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80009ee:	701a      	strb	r2, [r3, #0]
			checksum = ((hexCharToUint(firmware[(whichLine)][(9 + 2*length)]) << 4) | (hexCharToUint(firmware[(whichLine)][(10 + 2*length)])));
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <fileCompile+0x5a8>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <fileCompile+0x5bc>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	3309      	adds	r3, #9
 80009fc:	4925      	ldr	r1, [pc, #148]	; (8000a94 <fileCompile+0x5ac>)
 80009fe:	2032      	movs	r0, #50	; 0x32
 8000a00:	fb00 f202 	mul.w	r2, r0, r2
 8000a04:	440a      	add	r2, r1
 8000a06:	4413      	add	r3, r2
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fa2c 	bl	8000e68 <hexCharToUint>
 8000a10:	4603      	mov	r3, r0
 8000a12:	011b      	lsls	r3, r3, #4
 8000a14:	b25c      	sxtb	r4, r3
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <fileCompile+0x5a8>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <fileCompile+0x5bc>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	3305      	adds	r3, #5
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	491c      	ldr	r1, [pc, #112]	; (8000a94 <fileCompile+0x5ac>)
 8000a24:	2032      	movs	r0, #50	; 0x32
 8000a26:	fb00 f202 	mul.w	r2, r0, r2
 8000a2a:	440a      	add	r2, r1
 8000a2c:	4413      	add	r3, r2
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f000 fa19 	bl	8000e68 <hexCharToUint>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b25b      	sxtb	r3, r3
 8000a3a:	4323      	orrs	r3, r4
 8000a3c:	b25b      	sxtb	r3, r3
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <fileCompile+0x5c4>)
 8000a42:	701a      	strb	r2, [r3, #0]
			uint8_t checksumCalc = (~bytesSum) + 1;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <fileCompile+0x5b4>)
 8000a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4a:	b2d3      	uxtb	r3, r2
 8000a4c:	425b      	negs	r3, r3
 8000a4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (checksum != checksumCalc) line_error = whichLine;
 8000a52:	4b16      	ldr	r3, [pc, #88]	; (8000aac <fileCompile+0x5c4>)
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d004      	beq.n	8000a68 <fileCompile+0x580>
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <fileCompile+0x5a8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	b2da      	uxtb	r2, r3
 8000a64:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <fileCompile+0x5c8>)
 8000a66:	701a      	strb	r2, [r3, #0]

			if (hex_type == end_type) { //End of: program
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <fileCompile+0x5b0>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d103      	bne.n	8000a78 <fileCompile+0x590>
				EraseUserApplication();
 8000a70:	f000 f820 	bl	8000ab4 <EraseUserApplication>
				flashProgram();
 8000a74:	f000 f84e 	bl	8000b14 <flashProgram>
			}
			sign = 12;
 8000a78:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <fileCompile+0x5b8>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	701a      	strb	r2, [r3, #0]
			break;
 8000a7e:	e002      	b.n	8000a86 <fileCompile+0x59e>
		case 12:
			//just wait for next line, this case ignore for example '/r' or something like that
			break;
 8000a80:	bf00      	nop
 8000a82:	e000      	b.n	8000a86 <fileCompile+0x59e>
			break;
 8000a84:	bf00      	nop
	}

}
 8000a86:	bf00      	nop
 8000a88:	375c      	adds	r7, #92	; 0x5c
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a90:	2000c384 	.word	0x2000c384
 8000a94:	2000002c 	.word	0x2000002c
 8000a98:	2000c382 	.word	0x2000c382
 8000a9c:	2000c388 	.word	0x2000c388
 8000aa0:	2000c37c 	.word	0x2000c37c
 8000aa4:	2000c37d 	.word	0x2000c37d
 8000aa8:	2000c37e 	.word	0x2000c37e
 8000aac:	2000c37f 	.word	0x2000c37f
 8000ab0:	2000c380 	.word	0x2000c380

08000ab4 <EraseUserApplication>:





uint8_t EraseUserApplication() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef success = HAL_ERROR;
 8000aba:	2301      	movs	r3, #1
 8000abc:	77fb      	strb	r3, [r7, #31]
    uint32_t errorSector = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]

    if (HAL_FLASH_Unlock() == HAL_OK) {
 8000ac2:	f000 ff05 	bl	80018d0 <HAL_FLASH_Unlock>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d119      	bne.n	8000b00 <EraseUserApplication+0x4c>
        FLASH_EraseInitTypeDef eraseInit = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
 8000ad6:	60da      	str	r2, [r3, #12]
 8000ad8:	611a      	str	r2, [r3, #16]
        eraseInit.NbSectors = 18; // Count of sectors to erase
 8000ada:	2312      	movs	r3, #18
 8000adc:	613b      	str	r3, [r7, #16]
        eraseInit.Sector = FLASH_SECTOR_5; // First sector to erase
 8000ade:	2305      	movs	r3, #5
 8000ae0:	60fb      	str	r3, [r7, #12]
        eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3; //
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	617b      	str	r3, [r7, #20]
        eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	607b      	str	r3, [r7, #4]

        success = HAL_FLASHEx_Erase(&eraseInit, &errorSector);
 8000aea:	f107 0218 	add.w	r2, r7, #24
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	4611      	mov	r1, r2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 f85e 	bl	8001bb4 <HAL_FLASHEx_Erase>
 8000af8:	4603      	mov	r3, r0
 8000afa:	77fb      	strb	r3, [r7, #31]

        HAL_FLASH_Lock();
 8000afc:	f000 ff0a 	bl	8001914 <HAL_FLASH_Lock>
    }

    return success == HAL_OK ? 1 : 0;
 8000b00:	7ffb      	ldrb	r3, [r7, #31]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	bf0c      	ite	eq
 8000b06:	2301      	moveq	r3, #1
 8000b08:	2300      	movne	r3, #0
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3720      	adds	r7, #32
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <flashProgram>:


int flashProgram () {
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
	uint8_t  	RAWByteCounter;
	uint32_t  	appStartAddr;
	uint8_t 	makeByte;
	uint32_t 	startFlashAddress;

	for (uint16_t 	lineCounter = 1; lineCounter < whichLine+1; lineCounter++) {
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	81fb      	strh	r3, [r7, #14]
 8000b1e:	e15a      	b.n	8000dd6 <flashProgram+0x2c2>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000b20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b24:	48b2      	ldr	r0, [pc, #712]	; (8000df0 <flashProgram+0x2dc>)
 8000b26:	f001 fb4a 	bl	80021be <HAL_GPIO_TogglePin>

			uint8_t     type = ((hexCharToUint(firmware[lineCounter][7]) << 4) | (hexCharToUint(firmware[lineCounter][8]))); //Get type
 8000b2a:	89fb      	ldrh	r3, [r7, #14]
 8000b2c:	4ab1      	ldr	r2, [pc, #708]	; (8000df4 <flashProgram+0x2e0>)
 8000b2e:	2132      	movs	r1, #50	; 0x32
 8000b30:	fb01 f303 	mul.w	r3, r1, r3
 8000b34:	4413      	add	r3, r2
 8000b36:	3307      	adds	r3, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f994 	bl	8000e68 <hexCharToUint>
 8000b40:	4603      	mov	r3, r0
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	b25c      	sxtb	r4, r3
 8000b46:	89fb      	ldrh	r3, [r7, #14]
 8000b48:	4aaa      	ldr	r2, [pc, #680]	; (8000df4 <flashProgram+0x2e0>)
 8000b4a:	2132      	movs	r1, #50	; 0x32
 8000b4c:	fb01 f303 	mul.w	r3, r1, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	3308      	adds	r3, #8
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f986 	bl	8000e68 <hexCharToUint>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	4323      	orrs	r3, r4
 8000b62:	b25b      	sxtb	r3, r3
 8000b64:	727b      	strb	r3, [r7, #9]
			uint16_t   	length = ((hexCharToUint(firmware[lineCounter][1]) << 4) | (hexCharToUint(firmware[lineCounter][2])));
 8000b66:	89fb      	ldrh	r3, [r7, #14]
 8000b68:	4aa2      	ldr	r2, [pc, #648]	; (8000df4 <flashProgram+0x2e0>)
 8000b6a:	2132      	movs	r1, #50	; 0x32
 8000b6c:	fb01 f303 	mul.w	r3, r1, r3
 8000b70:	4413      	add	r3, r2
 8000b72:	3301      	adds	r3, #1
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f976 	bl	8000e68 <hexCharToUint>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	011b      	lsls	r3, r3, #4
 8000b80:	b21c      	sxth	r4, r3
 8000b82:	89fb      	ldrh	r3, [r7, #14]
 8000b84:	4a9b      	ldr	r2, [pc, #620]	; (8000df4 <flashProgram+0x2e0>)
 8000b86:	2132      	movs	r1, #50	; 0x32
 8000b88:	fb01 f303 	mul.w	r3, r1, r3
 8000b8c:	4413      	add	r3, r2
 8000b8e:	3302      	adds	r3, #2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 f968 	bl	8000e68 <hexCharToUint>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4323      	orrs	r3, r4
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	80fb      	strh	r3, [r7, #6]
			uint16_t 	address = ((hexCharToUint(firmware[lineCounter][3]) << 12)| (hexCharToUint(firmware[lineCounter][4]) << 8) |
 8000ba2:	89fb      	ldrh	r3, [r7, #14]
 8000ba4:	4a93      	ldr	r2, [pc, #588]	; (8000df4 <flashProgram+0x2e0>)
 8000ba6:	2132      	movs	r1, #50	; 0x32
 8000ba8:	fb01 f303 	mul.w	r3, r1, r3
 8000bac:	4413      	add	r3, r2
 8000bae:	3303      	adds	r3, #3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f000 f958 	bl	8000e68 <hexCharToUint>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	031b      	lsls	r3, r3, #12
 8000bbc:	b21c      	sxth	r4, r3
 8000bbe:	89fb      	ldrh	r3, [r7, #14]
 8000bc0:	4a8c      	ldr	r2, [pc, #560]	; (8000df4 <flashProgram+0x2e0>)
 8000bc2:	2132      	movs	r1, #50	; 0x32
 8000bc4:	fb01 f303 	mul.w	r3, r1, r3
 8000bc8:	4413      	add	r3, r2
 8000bca:	3304      	adds	r3, #4
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 f94a 	bl	8000e68 <hexCharToUint>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4323      	orrs	r3, r4
 8000bdc:	b21c      	sxth	r4, r3
							(hexCharToUint(firmware[lineCounter][5]) << 4) | (hexCharToUint(firmware[lineCounter][6])));
 8000bde:	89fb      	ldrh	r3, [r7, #14]
 8000be0:	4a84      	ldr	r2, [pc, #528]	; (8000df4 <flashProgram+0x2e0>)
 8000be2:	2132      	movs	r1, #50	; 0x32
 8000be4:	fb01 f303 	mul.w	r3, r1, r3
 8000be8:	4413      	add	r3, r2
 8000bea:	3305      	adds	r3, #5
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f93a 	bl	8000e68 <hexCharToUint>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	011b      	lsls	r3, r3, #4
			uint16_t 	address = ((hexCharToUint(firmware[lineCounter][3]) << 12)| (hexCharToUint(firmware[lineCounter][4]) << 8) |
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	b21c      	sxth	r4, r3
							(hexCharToUint(firmware[lineCounter][5]) << 4) | (hexCharToUint(firmware[lineCounter][6])));
 8000bfe:	89fb      	ldrh	r3, [r7, #14]
 8000c00:	4a7c      	ldr	r2, [pc, #496]	; (8000df4 <flashProgram+0x2e0>)
 8000c02:	2132      	movs	r1, #50	; 0x32
 8000c04:	fb01 f303 	mul.w	r3, r1, r3
 8000c08:	4413      	add	r3, r2
 8000c0a:	3306      	adds	r3, #6
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f92a 	bl	8000e68 <hexCharToUint>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	4323      	orrs	r3, r4
 8000c1a:	b21b      	sxth	r3, r3
			uint16_t 	address = ((hexCharToUint(firmware[lineCounter][3]) << 12)| (hexCharToUint(firmware[lineCounter][4]) << 8) |
 8000c1c:	80bb      	strh	r3, [r7, #4]

		if (type == flashaddr_type){
 8000c1e:	7a7b      	ldrb	r3, [r7, #9]
 8000c20:	2b04      	cmp	r3, #4
 8000c22:	d141      	bne.n	8000ca8 <flashProgram+0x194>
				uint8_t makeByte1=(hexCharToUint(firmware[lineCounter][9]) << 4) | hexCharToUint(firmware[lineCounter][10]);
 8000c24:	89fb      	ldrh	r3, [r7, #14]
 8000c26:	4a73      	ldr	r2, [pc, #460]	; (8000df4 <flashProgram+0x2e0>)
 8000c28:	2132      	movs	r1, #50	; 0x32
 8000c2a:	fb01 f303 	mul.w	r3, r1, r3
 8000c2e:	4413      	add	r3, r2
 8000c30:	3309      	adds	r3, #9
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f917 	bl	8000e68 <hexCharToUint>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	011b      	lsls	r3, r3, #4
 8000c3e:	b25c      	sxtb	r4, r3
 8000c40:	89fb      	ldrh	r3, [r7, #14]
 8000c42:	4a6c      	ldr	r2, [pc, #432]	; (8000df4 <flashProgram+0x2e0>)
 8000c44:	2132      	movs	r1, #50	; 0x32
 8000c46:	fb01 f303 	mul.w	r3, r1, r3
 8000c4a:	4413      	add	r3, r2
 8000c4c:	330a      	adds	r3, #10
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f000 f909 	bl	8000e68 <hexCharToUint>
 8000c56:	4603      	mov	r3, r0
 8000c58:	b25b      	sxtb	r3, r3
 8000c5a:	4323      	orrs	r3, r4
 8000c5c:	b25b      	sxtb	r3, r3
 8000c5e:	70fb      	strb	r3, [r7, #3]
				uint8_t makeByte2=(hexCharToUint(firmware[lineCounter][11]) << 4) | hexCharToUint(firmware[lineCounter][12]);
 8000c60:	89fb      	ldrh	r3, [r7, #14]
 8000c62:	4a64      	ldr	r2, [pc, #400]	; (8000df4 <flashProgram+0x2e0>)
 8000c64:	2132      	movs	r1, #50	; 0x32
 8000c66:	fb01 f303 	mul.w	r3, r1, r3
 8000c6a:	4413      	add	r3, r2
 8000c6c:	330b      	adds	r3, #11
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f8f9 	bl	8000e68 <hexCharToUint>
 8000c76:	4603      	mov	r3, r0
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	b25c      	sxtb	r4, r3
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	4a5d      	ldr	r2, [pc, #372]	; (8000df4 <flashProgram+0x2e0>)
 8000c80:	2132      	movs	r1, #50	; 0x32
 8000c82:	fb01 f303 	mul.w	r3, r1, r3
 8000c86:	4413      	add	r3, r2
 8000c88:	330c      	adds	r3, #12
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f8eb 	bl	8000e68 <hexCharToUint>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	4323      	orrs	r3, r4
 8000c98:	b25b      	sxtb	r3, r3
 8000c9a:	70bb      	strb	r3, [r7, #2]
				startFlashAddress = (makeByte1 << 24 | makeByte2 << 16);
 8000c9c:	78fb      	ldrb	r3, [r7, #3]
 8000c9e:	061a      	lsls	r2, r3, #24
 8000ca0:	78bb      	ldrb	r3, [r7, #2]
 8000ca2:	041b      	lsls	r3, r3, #16
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
		}

	    if (type == data_type) {
 8000ca8:	7a7b      	ldrb	r3, [r7, #9]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d155      	bne.n	8000d5a <flashProgram+0x246>
	    		RAWByteCounter = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	76fb      	strb	r3, [r7, #27]
	    	    for (uint16_t ASCIICounter = 0; ASCIICounter < ((2*length) - 1); ASCIICounter += 2) { //ACII Counter (2 sign = 1 Byte)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	81bb      	strh	r3, [r7, #12]
 8000cb6:	e04a      	b.n	8000d4e <flashProgram+0x23a>
	    	    	makeByte=(hexCharToUint(firmware[lineCounter][ASCIICounter + 9]) << 4) | hexCharToUint(firmware[lineCounter][ASCIICounter + 10]); //make bytes
 8000cb8:	89fa      	ldrh	r2, [r7, #14]
 8000cba:	89bb      	ldrh	r3, [r7, #12]
 8000cbc:	3309      	adds	r3, #9
 8000cbe:	494d      	ldr	r1, [pc, #308]	; (8000df4 <flashProgram+0x2e0>)
 8000cc0:	2032      	movs	r0, #50	; 0x32
 8000cc2:	fb00 f202 	mul.w	r2, r0, r2
 8000cc6:	440a      	add	r2, r1
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f8cb 	bl	8000e68 <hexCharToUint>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	011b      	lsls	r3, r3, #4
 8000cd6:	b25c      	sxtb	r4, r3
 8000cd8:	89fa      	ldrh	r2, [r7, #14]
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	330a      	adds	r3, #10
 8000cde:	4945      	ldr	r1, [pc, #276]	; (8000df4 <flashProgram+0x2e0>)
 8000ce0:	2032      	movs	r0, #50	; 0x32
 8000ce2:	fb00 f202 	mul.w	r2, r0, r2
 8000ce6:	440a      	add	r2, r1
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 f8bb 	bl	8000e68 <hexCharToUint>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b25b      	sxtb	r3, r3
 8000cf6:	4323      	orrs	r3, r4
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	707b      	strb	r3, [r7, #1]
	    	    	RAWfirmware = (RAWfirmware << 8) | makeByte;
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	021a      	lsls	r2, r3, #8
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	61fb      	str	r3, [r7, #28]
	    	    	if  ((RAWByteCounter == 4) || (RAWByteCounter == 8) || (RAWByteCounter == 12) || (RAWByteCounter == 16)){ //if 4 bytes +offset
 8000d06:	7efb      	ldrb	r3, [r7, #27]
 8000d08:	2b04      	cmp	r3, #4
 8000d0a:	d008      	beq.n	8000d1e <flashProgram+0x20a>
 8000d0c:	7efb      	ldrb	r3, [r7, #27]
 8000d0e:	2b08      	cmp	r3, #8
 8000d10:	d005      	beq.n	8000d1e <flashProgram+0x20a>
 8000d12:	7efb      	ldrb	r3, [r7, #27]
 8000d14:	2b0c      	cmp	r3, #12
 8000d16:	d002      	beq.n	8000d1e <flashProgram+0x20a>
 8000d18:	7efb      	ldrb	r3, [r7, #27]
 8000d1a:	2b10      	cmp	r3, #16
 8000d1c:	d10a      	bne.n	8000d34 <flashProgram+0x220>
	    	    		flashMemory((startFlashAddress | (address + RAWByteCounter - 4)), RAWfirmware);
 8000d1e:	88ba      	ldrh	r2, [r7, #4]
 8000d20:	7efb      	ldrb	r3, [r7, #27]
 8000d22:	4413      	add	r3, r2
 8000d24:	3b04      	subs	r3, #4
 8000d26:	461a      	mov	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	69f9      	ldr	r1, [r7, #28]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 f8d2 	bl	8000ed8 <flashMemory>
	    	    		}
	    	    		if (RAWByteCounter == length) RAWByteCounter = 0;
 8000d34:	7efb      	ldrb	r3, [r7, #27]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	88fa      	ldrh	r2, [r7, #6]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d101      	bne.n	8000d42 <flashProgram+0x22e>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	76fb      	strb	r3, [r7, #27]
	    	    		RAWByteCounter++; //in next step RAWByteCounter +1
 8000d42:	7efb      	ldrb	r3, [r7, #27]
 8000d44:	3301      	adds	r3, #1
 8000d46:	76fb      	strb	r3, [r7, #27]
	    	    for (uint16_t ASCIICounter = 0; ASCIICounter < ((2*length) - 1); ASCIICounter += 2) { //ACII Counter (2 sign = 1 Byte)
 8000d48:	89bb      	ldrh	r3, [r7, #12]
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	81bb      	strh	r3, [r7, #12]
 8000d4e:	89ba      	ldrh	r2, [r7, #12]
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	3b01      	subs	r3, #1
 8000d56:	429a      	cmp	r2, r3
 8000d58:	dbae      	blt.n	8000cb8 <flashProgram+0x1a4>

		if (type ==  end_type) {
			NVIC_SystemReset;
		}

		if (type ==  appaddr_type) {
 8000d5a:	7a7b      	ldrb	r3, [r7, #9]
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d137      	bne.n	8000dd0 <flashProgram+0x2bc>
			RAWByteCounter = 1;
 8000d60:	2301      	movs	r3, #1
 8000d62:	76fb      	strb	r3, [r7, #27]
			for (uint16_t ASCIICounter = 0; ASCIICounter < ((2*length) - 1); ASCIICounter += 2) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	817b      	strh	r3, [r7, #10]
 8000d68:	e02c      	b.n	8000dc4 <flashProgram+0x2b0>
				makeByte=(hexCharToUint(firmware[lineCounter][ASCIICounter + 9]) << 4) | hexCharToUint(firmware[lineCounter][ASCIICounter + 10]); //make bytes
 8000d6a:	89fa      	ldrh	r2, [r7, #14]
 8000d6c:	897b      	ldrh	r3, [r7, #10]
 8000d6e:	3309      	adds	r3, #9
 8000d70:	4920      	ldr	r1, [pc, #128]	; (8000df4 <flashProgram+0x2e0>)
 8000d72:	2032      	movs	r0, #50	; 0x32
 8000d74:	fb00 f202 	mul.w	r2, r0, r2
 8000d78:	440a      	add	r2, r1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f872 	bl	8000e68 <hexCharToUint>
 8000d84:	4603      	mov	r3, r0
 8000d86:	011b      	lsls	r3, r3, #4
 8000d88:	b25c      	sxtb	r4, r3
 8000d8a:	89fa      	ldrh	r2, [r7, #14]
 8000d8c:	897b      	ldrh	r3, [r7, #10]
 8000d8e:	330a      	adds	r3, #10
 8000d90:	4918      	ldr	r1, [pc, #96]	; (8000df4 <flashProgram+0x2e0>)
 8000d92:	2032      	movs	r0, #50	; 0x32
 8000d94:	fb00 f202 	mul.w	r2, r0, r2
 8000d98:	440a      	add	r2, r1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f862 	bl	8000e68 <hexCharToUint>
 8000da4:	4603      	mov	r3, r0
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	4323      	orrs	r3, r4
 8000daa:	b25b      	sxtb	r3, r3
 8000dac:	707b      	strb	r3, [r7, #1]
				appStartAddr = (appStartAddr << 8) | makeByte;
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	021a      	lsls	r2, r3, #8
 8000db2:	787b      	ldrb	r3, [r7, #1]
 8000db4:	4313      	orrs	r3, r2
 8000db6:	617b      	str	r3, [r7, #20]
				RAWByteCounter++;
 8000db8:	7efb      	ldrb	r3, [r7, #27]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	76fb      	strb	r3, [r7, #27]
			for (uint16_t ASCIICounter = 0; ASCIICounter < ((2*length) - 1); ASCIICounter += 2) {
 8000dbe:	897b      	ldrh	r3, [r7, #10]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	817b      	strh	r3, [r7, #10]
 8000dc4:	897a      	ldrh	r2, [r7, #10]
 8000dc6:	88fb      	ldrh	r3, [r7, #6]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dbcc      	blt.n	8000d6a <flashProgram+0x256>
	for (uint16_t 	lineCounter = 1; lineCounter < whichLine+1; lineCounter++) {
 8000dd0:	89fb      	ldrh	r3, [r7, #14]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	81fb      	strh	r3, [r7, #14]
 8000dd6:	89fa      	ldrh	r2, [r7, #14]
 8000dd8:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <flashProgram+0x2e4>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	429a      	cmp	r2, r3
 8000de0:	f4ff ae9e 	bcc.w	8000b20 <flashProgram+0xc>
			}
		}
	} //End of: loop
	return 0;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021800 	.word	0x40021800
 8000df4:	2000002c 	.word	0x2000002c
 8000df8:	2000c384 	.word	0x2000c384

08000dfc <JumpToAddress>:




typedef void (*pFunction)(void);
int JumpToAddress(uint32_t addr) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    uint32_t JumpAddress = *(uint32_t *) (addr + 4);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3304      	adds	r3, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	617b      	str	r3, [r7, #20]
    pFunction Jump = (pFunction) JumpAddress;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]

    HAL_RCC_DeInit();
 8000e10:	f001 fe48 	bl	8002aa4 <HAL_RCC_DeInit>
    HAL_DeInit();
 8000e14:	f000 fae0 	bl	80013d8 <HAL_DeInit>
    SysTick->CTRL = 0;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	; (8000e4c <JumpToAddress+0x50>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <JumpToAddress+0x50>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <JumpToAddress+0x50>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]

    SCB->VTOR = addr;
 8000e2a:	4a09      	ldr	r2, [pc, #36]	; (8000e50 <JumpToAddress+0x54>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6093      	str	r3, [r2, #8]
    __set_MSP(*(uint32_t *) addr);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f383 8808 	msr	MSP, r3
}
 8000e3c:	bf00      	nop

    Jump();
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4798      	blx	r3
    return 0;
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	e000e010 	.word	0xe000e010
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <JumpToApplication>:

void JumpToApplication() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
    JumpToAddress(APP_ADDRESS);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <JumpToApplication+0x10>)
 8000e5a:	f7ff ffcf 	bl	8000dfc <JumpToAddress>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	08020000 	.word	0x08020000

08000e68 <hexCharToUint>:

void JumpToBootloader() {
    JumpToAddress(BOOT_ADDRESS);
}

uint8_t hexCharToUint(char c) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	2b2f      	cmp	r3, #47	; 0x2f
 8000e76:	d906      	bls.n	8000e86 <hexCharToUint+0x1e>
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2b39      	cmp	r3, #57	; 0x39
 8000e7c:	d803      	bhi.n	8000e86 <hexCharToUint+0x1e>
        return c - '0';
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	3b30      	subs	r3, #48	; 0x30
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	e014      	b.n	8000eb0 <hexCharToUint+0x48>
    } else if (c >= 'A' && c <= 'F') {
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b40      	cmp	r3, #64	; 0x40
 8000e8a:	d906      	bls.n	8000e9a <hexCharToUint+0x32>
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b46      	cmp	r3, #70	; 0x46
 8000e90:	d803      	bhi.n	8000e9a <hexCharToUint+0x32>
        return c - 'A' + 10;
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	3b37      	subs	r3, #55	; 0x37
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	e00a      	b.n	8000eb0 <hexCharToUint+0x48>
    } else if (c >= 'a' && c <= 'f') {
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	2b60      	cmp	r3, #96	; 0x60
 8000e9e:	d906      	bls.n	8000eae <hexCharToUint+0x46>
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	2b66      	cmp	r3, #102	; 0x66
 8000ea4:	d803      	bhi.n	8000eae <hexCharToUint+0x46>
        return c - 'a' + 10;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	3b57      	subs	r3, #87	; 0x57
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	e000      	b.n	8000eb0 <hexCharToUint+0x48>
    } else {
        return 0;  // Znak nie jest heksadecymalny
 8000eae:	2300      	movs	r3, #0
    }
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <read_uint32_from_flash>:
uint8_t hexCharsToUint(char high, char low) {
    return (hexCharToUint(high) << 4) | hexCharToUint(low);
}

uint32_t read_uint32_from_flash(uint32_t* flash_address){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
    uint32_t value = *flash_address;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	60fb      	str	r3, [r7, #12]
    return value;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <flashMemory>:
uint8_t problemsCounter = 0;
void flashMemory (uint32_t address, uint32_t RAWfirmware) {
 8000ed8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	6039      	str	r1, [r7, #0]
	if (HAL_FLASH_Unlock() == HAL_OK) {
 8000ee4:	f000 fcf4 	bl	80018d0 <HAL_FLASH_Unlock>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d12d      	bne.n	8000f4a <flashMemory+0x72>
		uint32_t swapped = __builtin_bswap32(RAWfirmware);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	ba1b      	rev	r3, r3
 8000ef2:	60fb      	str	r3, [r7, #12]

		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, swapped);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	4698      	mov	r8, r3
 8000efa:	4691      	mov	r9, r2
 8000efc:	4642      	mov	r2, r8
 8000efe:	464b      	mov	r3, r9
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	2002      	movs	r0, #2
 8000f04:	f000 fc90 	bl	8001828 <HAL_FLASH_Program>
		uint32_t readWriteData = read_uint32_from_flash(address);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ffd6 	bl	8000ebc <read_uint32_from_flash>
 8000f10:	60b8      	str	r0, [r7, #8]

 		if (readWriteData == swapped) {
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d101      	bne.n	8000f1e <flashMemory+0x46>
            HAL_FLASH_Lock();
 8000f1a:	f000 fcfb 	bl	8001914 <HAL_FLASH_Lock>
        }
        if (readWriteData != swapped) {
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	429a      	cmp	r2, r3
 8000f24:	d011      	beq.n	8000f4a <flashMemory+0x72>
        	problemsCounter++;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <flashMemory+0x7c>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <flashMemory+0x7c>)
 8000f30:	701a      	strb	r2, [r3, #0]
        	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, RAWfirmware); //try one more
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	2200      	movs	r2, #0
 8000f36:	461c      	mov	r4, r3
 8000f38:	4615      	mov	r5, r2
 8000f3a:	4622      	mov	r2, r4
 8000f3c:	462b      	mov	r3, r5
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	2002      	movs	r0, #2
 8000f42:	f000 fc71 	bl	8001828 <HAL_FLASH_Program>
            HAL_FLASH_Lock();
 8000f46:	f000 fce5 	bl	8001914 <HAL_FLASH_Lock>
        }
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000f54:	2000c391 	.word	0x2000c391

08000f58 <UserApplicationExists>:


uint8_t UserApplicationExists() {
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
    uint32_t bootloaderMspValue = *(uint32_t *) (FLASH_BASE);
 8000f5e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	607b      	str	r3, [r7, #4]
    uint32_t appMspValue = *(uint32_t *) (APP_ADDRESS);
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <UserApplicationExists+0x30>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	603b      	str	r3, [r7, #0]

    return appMspValue == bootloaderMspValue ? 1 : 0;
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	bf0c      	ite	eq
 8000f74:	2301      	moveq	r3, #1
 8000f76:	2300      	movne	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	08020000 	.word	0x08020000

08000f8c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	f107 030c 	add.w	r3, r7, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b19      	ldr	r3, [pc, #100]	; (800100c <MX_GPIO_Init+0x80>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a18      	ldr	r2, [pc, #96]	; (800100c <MX_GPIO_Init+0x80>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_GPIO_Init+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_GPIO_Init+0x80>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a11      	ldr	r2, [pc, #68]	; (800100c <MX_GPIO_Init+0x80>)
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_GPIO_Init+0x80>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <MX_GPIO_Init+0x84>)
 8000fe2:	f001 f8d3 	bl	800218c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fe6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4804      	ldr	r0, [pc, #16]	; (8001010 <MX_GPIO_Init+0x84>)
 8001000:	f000 ff18 	bl	8001e34 <HAL_GPIO_Init>

}
 8001004:	bf00      	nop
 8001006:	3720      	adds	r7, #32
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40023800 	.word	0x40023800
 8001010:	40021800 	.word	0x40021800

08001014 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001018:	f000 f9bc 	bl	8001394 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101c:	f000 f816 	bl	800104c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001020:	f7ff ffb4 	bl	8000f8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001024:	f000 f8e6 	bl	80011f4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart2_userinit();
 8001028:	f000 f95e 	bl	80012e8 <uart2_userinit>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800102c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001030:	4805      	ldr	r0, [pc, #20]	; (8001048 <main+0x34>)
 8001032:	f001 f8c4 	bl	80021be <HAL_GPIO_TogglePin>

  if(UserApplicationExists()) JumpToApplication();
 8001036:	f7ff ff8f 	bl	8000f58 <UserApplicationExists>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <main+0x30>
 8001040:	f7ff ff08 	bl	8000e54 <JumpToApplication>


  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001044:	e7fe      	b.n	8001044 <main+0x30>
 8001046:	bf00      	nop
 8001048:	40021800 	.word	0x40021800

0800104c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b094      	sub	sp, #80	; 0x50
 8001050:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001052:	f107 0320 	add.w	r3, r7, #32
 8001056:	2230      	movs	r2, #48	; 0x30
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f002 fd92 	bl	8003b84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <SystemClock_Config+0xb8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <SystemClock_Config+0xb8>)
 800107a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107e:	6413      	str	r3, [r2, #64]	; 0x40
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <SystemClock_Config+0xb8>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <SystemClock_Config+0xbc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <SystemClock_Config+0xbc>)
 800109a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109e:	6013      	str	r3, [r2, #0]
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <SystemClock_Config+0xbc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b4:	2310      	movs	r3, #16
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	4618      	mov	r0, r3
 80010c2:	f001 f897 	bl	80021f4 <HAL_RCC_OscConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010cc:	f000 f81e 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010d0:	230f      	movs	r3, #15
 80010d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010dc:	2300      	movs	r3, #0
 80010de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010e4:	f107 030c 	add.w	r3, r7, #12
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fafa 	bl	80026e4 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010f6:	f000 f809 	bl	800110c <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3750      	adds	r7, #80	; 0x50
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40007000 	.word	0x40007000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <HAL_MspInit+0x4c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <HAL_MspInit+0x4c>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <HAL_MspInit+0x4c>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <HAL_MspInit+0x4c>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011b4:	f000 f974 	bl	80014a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}

080011bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART2_IRQHandler+0x10>)
 80011c2:	f001 fde5 	bl	8002d90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000c394 	.word	0x2000c394

080011d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <SystemInit+0x20>)
 80011d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011da:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <SystemInit+0x20>)
 80011dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART2_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001204:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART2_UART_Init+0x4c>)
 800122c:	f001 fd32 	bl	8002c94 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f7ff ff69 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	2000c394 	.word	0x2000c394
 8001244:	40004400 	.word	0x40004400

08001248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1d      	ldr	r2, [pc, #116]	; (80012dc <HAL_UART_MspInit+0x94>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d133      	bne.n	80012d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <HAL_UART_MspInit+0x98>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x98>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001290:	f043 0308 	orr.w	r3, r3, #8
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0x98>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b2:	2307      	movs	r3, #7
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	4809      	ldr	r0, [pc, #36]	; (80012e4 <HAL_UART_MspInit+0x9c>)
 80012be:	f000 fdb9 	bl	8001e34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2100      	movs	r1, #0
 80012c6:	2026      	movs	r0, #38	; 0x26
 80012c8:	f000 f9e5 	bl	8001696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012cc:	2026      	movs	r0, #38	; 0x26
 80012ce:	f000 f9fe 	bl	80016ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012d2:	bf00      	nop
 80012d4:	3728      	adds	r7, #40	; 0x28
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020c00 	.word	0x40020c00

080012e8 <uart2_userinit>:
}

/* USER CODE BEGIN 1 */

char firmwareByte_;
void uart2_userinit () {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	 HAL_UART_Receive_IT(&huart2,&firmwareByte_, 1);
 80012ec:	2201      	movs	r2, #1
 80012ee:	4903      	ldr	r1, [pc, #12]	; (80012fc <uart2_userinit+0x14>)
 80012f0:	4803      	ldr	r0, [pc, #12]	; (8001300 <uart2_userinit+0x18>)
 80012f2:	f001 fd1c 	bl	8002d2e <HAL_UART_Receive_IT>
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000c3d8 	.word	0x2000c3d8
 8001300:	2000c394 	.word	0x2000c394

08001304 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 if(huart -> Instance == USART2)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a08      	ldr	r2, [pc, #32]	; (8001334 <HAL_UART_RxCpltCallback+0x30>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d109      	bne.n	800132a <HAL_UART_RxCpltCallback+0x26>
  {
	 fileCompile(firmwareByte_);
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_UART_RxCpltCallback+0x34>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f8e4 	bl	80004e8 <fileCompile>
	 HAL_UART_Receive_IT(&huart2,&firmwareByte_, 1);
 8001320:	2201      	movs	r2, #1
 8001322:	4905      	ldr	r1, [pc, #20]	; (8001338 <HAL_UART_RxCpltCallback+0x34>)
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_UART_RxCpltCallback+0x38>)
 8001326:	f001 fd02 	bl	8002d2e <HAL_UART_Receive_IT>
  }
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40004400 	.word	0x40004400
 8001338:	2000c3d8 	.word	0x2000c3d8
 800133c:	2000c394 	.word	0x2000c394

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001346:	490e      	ldr	r1, [pc, #56]	; (8001380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800135c:	4c0b      	ldr	r4, [pc, #44]	; (800138c <LoopFillZerobss+0x26>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800136a:	f7ff ff31 	bl	80011d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f002 fc11 	bl	8003b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff fe4f 	bl	8001014 <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001378:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001384:	08003c1c 	.word	0x08003c1c
  ldr r2, =_sbss
 8001388:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800138c:	2000c400 	.word	0x2000c400

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_Init+0x40>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_Init+0x40>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f95f 	bl	8001680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	200f      	movs	r0, #15
 80013c4:	f000 f83c 	bl	8001440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fea6 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80013dc:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_DeInit+0x54>)
 80013de:	f04f 32ff 	mov.w	r2, #4294967295
 80013e2:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_DeInit+0x54>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_DeInit+0x54>)
 80013ec:	f04f 32ff 	mov.w	r2, #4294967295
 80013f0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_DeInit+0x54>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_DeInit+0x54>)
 80013fa:	f04f 32ff 	mov.w	r2, #4294967295
 80013fe:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_DeInit+0x54>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_DeInit+0x54>)
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 800140e:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_DeInit+0x54>)
 8001410:	2200      	movs	r2, #0
 8001412:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <HAL_DeInit+0x54>)
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <HAL_DeInit+0x54>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001422:	f000 f805 	bl	8001430 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
}
 8001428:	4618      	mov	r0, r3
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x54>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x58>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001456:	fbb3 f3f1 	udiv	r3, r3, r1
 800145a:	fbb2 f3f3 	udiv	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f943 	bl	80016ea <HAL_SYSTICK_Config>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e00e      	b.n	800148c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b0f      	cmp	r3, #15
 8001472:	d80a      	bhi.n	800148a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001474:	2200      	movs	r2, #0
 8001476:	6879      	ldr	r1, [r7, #4]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	f000 f90b 	bl	8001696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001480:	4a06      	ldr	r2, [pc, #24]	; (800149c <HAL_InitTick+0x5c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e000      	b.n	800148c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000000 	.word	0x20000000
 8001498:	20000008 	.word	0x20000008
 800149c:	20000004 	.word	0x20000004

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000008 	.word	0x20000008
 80014c4:	2000c3dc 	.word	0x2000c3dc

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000c3dc 	.word	0x2000c3dc

080014e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014fc:	4013      	ands	r3, r2
 80014fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800150c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001512:	4a04      	ldr	r2, [pc, #16]	; (8001524 <__NVIC_SetPriorityGrouping+0x44>)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	60d3      	str	r3, [r2, #12]
}
 8001518:	bf00      	nop
 800151a:	3714      	adds	r7, #20
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800152c:	4b04      	ldr	r3, [pc, #16]	; (8001540 <__NVIC_GetPriorityGrouping+0x18>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	0a1b      	lsrs	r3, r3, #8
 8001532:	f003 0307 	and.w	r3, r3, #7
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr
 8001540:	e000ed00 	.word	0xe000ed00

08001544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db0b      	blt.n	800156e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	f003 021f 	and.w	r2, r3, #31
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <__NVIC_EnableIRQ+0x38>)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	095b      	lsrs	r3, r3, #5
 8001564:	2001      	movs	r0, #1
 8001566:	fa00 f202 	lsl.w	r2, r0, r2
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000e100 	.word	0xe000e100

08001580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	6039      	str	r1, [r7, #0]
 800158a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001590:	2b00      	cmp	r3, #0
 8001592:	db0a      	blt.n	80015aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	b2da      	uxtb	r2, r3
 8001598:	490c      	ldr	r1, [pc, #48]	; (80015cc <__NVIC_SetPriority+0x4c>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	0112      	lsls	r2, r2, #4
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	440b      	add	r3, r1
 80015a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015a8:	e00a      	b.n	80015c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <__NVIC_SetPriority+0x50>)
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	f003 030f 	and.w	r3, r3, #15
 80015b6:	3b04      	subs	r3, #4
 80015b8:	0112      	lsls	r2, r2, #4
 80015ba:	b2d2      	uxtb	r2, r2
 80015bc:	440b      	add	r3, r1
 80015be:	761a      	strb	r2, [r3, #24]
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b089      	sub	sp, #36	; 0x24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	60f8      	str	r0, [r7, #12]
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f003 0307 	and.w	r3, r3, #7
 80015e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	f1c3 0307 	rsb	r3, r3, #7
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	bf28      	it	cs
 80015f2:	2304      	movcs	r3, #4
 80015f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	3304      	adds	r3, #4
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d902      	bls.n	8001604 <NVIC_EncodePriority+0x30>
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3b03      	subs	r3, #3
 8001602:	e000      	b.n	8001606 <NVIC_EncodePriority+0x32>
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001608:	f04f 32ff 	mov.w	r2, #4294967295
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43da      	mvns	r2, r3
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	401a      	ands	r2, r3
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	43d9      	mvns	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800162c:	4313      	orrs	r3, r2
         );
}
 800162e:	4618      	mov	r0, r3
 8001630:	3724      	adds	r7, #36	; 0x24
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800164c:	d301      	bcc.n	8001652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164e:	2301      	movs	r3, #1
 8001650:	e00f      	b.n	8001672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <SysTick_Config+0x40>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	3b01      	subs	r3, #1
 8001658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165a:	210f      	movs	r1, #15
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f7ff ff8e 	bl	8001580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <SysTick_Config+0x40>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <SysTick_Config+0x40>)
 800166c:	2207      	movs	r2, #7
 800166e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	e000e010 	.word	0xe000e010

08001680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff29 	bl	80014e0 <__NVIC_SetPriorityGrouping>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
 80016a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016a8:	f7ff ff3e 	bl	8001528 <__NVIC_GetPriorityGrouping>
 80016ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	6978      	ldr	r0, [r7, #20]
 80016b4:	f7ff ff8e 	bl	80015d4 <NVIC_EncodePriority>
 80016b8:	4602      	mov	r2, r0
 80016ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff ff5d 	bl	8001580 <__NVIC_SetPriority>
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b082      	sub	sp, #8
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff ff31 	bl	8001544 <__NVIC_EnableIRQ>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff ffa2 	bl	800163c <SysTick_Config>
 80016f8:	4603      	mov	r3, r0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001710:	f7ff feda 	bl	80014c8 <HAL_GetTick>
 8001714:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d008      	beq.n	8001734 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2280      	movs	r2, #128	; 0x80
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e052      	b.n	80017da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 0216 	bic.w	r2, r2, #22
 8001742:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001752:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	2b00      	cmp	r3, #0
 800175a:	d103      	bne.n	8001764 <HAL_DMA_Abort+0x62>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001760:	2b00      	cmp	r3, #0
 8001762:	d007      	beq.n	8001774 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0208 	bic.w	r2, r2, #8
 8001772:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001784:	e013      	b.n	80017ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001786:	f7ff fe9f 	bl	80014c8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b05      	cmp	r3, #5
 8001792:	d90c      	bls.n	80017ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2220      	movs	r2, #32
 8001798:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2203      	movs	r2, #3
 800179e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e015      	b.n	80017da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1e4      	bne.n	8001786 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c0:	223f      	movs	r2, #63	; 0x3f
 80017c2:	409a      	lsls	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d004      	beq.n	8001800 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2280      	movs	r2, #128	; 0x80
 80017fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e00c      	b.n	800181a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2205      	movs	r2, #5
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f022 0201 	bic.w	r2, r2, #1
 8001816:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_FLASH_Program+0xa0>)
 800183c:	7e1b      	ldrb	r3, [r3, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_FLASH_Program+0x1e>
 8001842:	2302      	movs	r3, #2
 8001844:	e03b      	b.n	80018be <HAL_FLASH_Program+0x96>
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_FLASH_Program+0xa0>)
 8001848:	2201      	movs	r2, #1
 800184a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800184c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001850:	f000 f870 	bl	8001934 <FLASH_WaitForLastOperation>
 8001854:	4603      	mov	r3, r0
 8001856:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001858:	7dfb      	ldrb	r3, [r7, #23]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d12b      	bne.n	80018b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d105      	bne.n	8001870 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001864:	783b      	ldrb	r3, [r7, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	68b8      	ldr	r0, [r7, #8]
 800186a:	f000 f91b 	bl	8001aa4 <FLASH_Program_Byte>
 800186e:	e016      	b.n	800189e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d105      	bne.n	8001882 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001876:	883b      	ldrh	r3, [r7, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	68b8      	ldr	r0, [r7, #8]
 800187c:	f000 f8ee 	bl	8001a5c <FLASH_Program_HalfWord>
 8001880:	e00d      	b.n	800189e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d105      	bne.n	8001894 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f000 f8c3 	bl	8001a18 <FLASH_Program_Word>
 8001892:	e004      	b.n	800189e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001894:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001898:	68b8      	ldr	r0, [r7, #8]
 800189a:	f000 f88b 	bl	80019b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800189e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018a2:	f000 f847 	bl	8001934 <FLASH_WaitForLastOperation>
 80018a6:	4603      	mov	r3, r0
 80018a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_FLASH_Program+0xa4>)
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <HAL_FLASH_Program+0xa4>)
 80018b0:	f023 0301 	bic.w	r3, r3, #1
 80018b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_FLASH_Program+0xa0>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000c3e0 	.word	0x2000c3e0
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_FLASH_Unlock+0x38>)
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da0b      	bge.n	80018fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80018e2:	4b09      	ldr	r3, [pc, #36]	; (8001908 <HAL_FLASH_Unlock+0x38>)
 80018e4:	4a09      	ldr	r2, [pc, #36]	; (800190c <HAL_FLASH_Unlock+0x3c>)
 80018e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_FLASH_Unlock+0x38>)
 80018ea:	4a09      	ldr	r2, [pc, #36]	; (8001910 <HAL_FLASH_Unlock+0x40>)
 80018ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80018ee:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_FLASH_Unlock+0x38>)
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	da01      	bge.n	80018fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80018fa:	79fb      	ldrb	r3, [r7, #7]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40023c00 	.word	0x40023c00
 800190c:	45670123 	.word	0x45670123
 8001910:	cdef89ab 	.word	0xcdef89ab

08001914 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_FLASH_Lock+0x1c>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a04      	ldr	r2, [pc, #16]	; (8001930 <HAL_FLASH_Lock+0x1c>)
 800191e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001922:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40023c00 	.word	0x40023c00

08001934 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001940:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <FLASH_WaitForLastOperation+0x78>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001946:	f7ff fdbf 	bl	80014c8 <HAL_GetTick>
 800194a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800194c:	e010      	b.n	8001970 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001954:	d00c      	beq.n	8001970 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d007      	beq.n	800196c <FLASH_WaitForLastOperation+0x38>
 800195c:	f7ff fdb4 	bl	80014c8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	429a      	cmp	r2, r3
 800196a:	d201      	bcs.n	8001970 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e019      	b.n	80019a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <FLASH_WaitForLastOperation+0x7c>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e8      	bne.n	800194e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <FLASH_WaitForLastOperation+0x7c>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <FLASH_WaitForLastOperation+0x7c>)
 800198a:	2201      	movs	r2, #1
 800198c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <FLASH_WaitForLastOperation+0x7c>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800199a:	f000 f8a5 	bl	8001ae8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
  
}  
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000c3e0 	.word	0x2000c3e0
 80019b0:	40023c00 	.word	0x40023c00

080019b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <FLASH_Program_DoubleWord+0x60>)
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	4a13      	ldr	r2, [pc, #76]	; (8001a14 <FLASH_Program_DoubleWord+0x60>)
 80019c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80019cc:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <FLASH_Program_DoubleWord+0x60>)
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <FLASH_Program_DoubleWord+0x60>)
 80019d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80019d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <FLASH_Program_DoubleWord+0x60>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <FLASH_Program_DoubleWord+0x60>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80019ea:	f3bf 8f6f 	isb	sy
}
 80019ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80019f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	000a      	movs	r2, r1
 80019fe:	2300      	movs	r3, #0
 8001a00:	68f9      	ldr	r1, [r7, #12]
 8001a02:	3104      	adds	r1, #4
 8001a04:	4613      	mov	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <FLASH_Program_Word+0x40>)
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <FLASH_Program_Word+0x40>)
 8001a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <FLASH_Program_Word+0x40>)
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <FLASH_Program_Word+0x40>)
 8001a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a38:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <FLASH_Program_Word+0x40>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4a06      	ldr	r2, [pc, #24]	; (8001a58 <FLASH_Program_Word+0x40>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	601a      	str	r2, [r3, #0]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a68:	4b0d      	ldr	r3, [pc, #52]	; (8001aa0 <FLASH_Program_HalfWord+0x44>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a0c      	ldr	r2, [pc, #48]	; (8001aa0 <FLASH_Program_HalfWord+0x44>)
 8001a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a72:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	; (8001aa0 <FLASH_Program_HalfWord+0x44>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	4a09      	ldr	r2, [pc, #36]	; (8001aa0 <FLASH_Program_HalfWord+0x44>)
 8001a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <FLASH_Program_HalfWord+0x44>)
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	4a06      	ldr	r2, [pc, #24]	; (8001aa0 <FLASH_Program_HalfWord+0x44>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	887a      	ldrh	r2, [r7, #2]
 8001a90:	801a      	strh	r2, [r3, #0]
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <FLASH_Program_Byte+0x40>)
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	4a0b      	ldr	r2, [pc, #44]	; (8001ae4 <FLASH_Program_Byte+0x40>)
 8001ab6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <FLASH_Program_Byte+0x40>)
 8001abe:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <FLASH_Program_Byte+0x40>)
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <FLASH_Program_Byte+0x40>)
 8001ac6:	691b      	ldr	r3, [r3, #16]
 8001ac8:	4a06      	ldr	r2, [pc, #24]	; (8001ae4 <FLASH_Program_Byte+0x40>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	701a      	strb	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001aec:	4b2f      	ldr	r3, [pc, #188]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	f003 0310 	and.w	r3, r3, #16
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001af8:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	f043 0310 	orr.w	r3, r3, #16
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b02:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b06:	2210      	movs	r2, #16
 8001b08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f003 0320 	and.w	r3, r3, #32
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b20:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b24:	2220      	movs	r2, #32
 8001b26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f043 0304 	orr.w	r3, r3, #4
 8001b3c:	4a1c      	ldr	r2, [pc, #112]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001b40:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b42:	2240      	movs	r2, #64	; 0x40
 8001b44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d008      	beq.n	8001b64 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f043 0302 	orr.w	r3, r3, #2
 8001b5a:	4a15      	ldr	r2, [pc, #84]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b5c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	4a0d      	ldr	r2, [pc, #52]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b82:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001b90:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	f043 0320 	orr.w	r3, r3, #32
 8001b98:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <FLASH_SetErrorCode+0xc8>)
 8001b9a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001b9c:	4b03      	ldr	r3, [pc, #12]	; (8001bac <FLASH_SetErrorCode+0xc4>)
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	60da      	str	r2, [r3, #12]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	40023c00 	.word	0x40023c00
 8001bb0:	2000c3e0 	.word	0x2000c3e0

08001bb4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bc6:	4b32      	ldr	r3, [pc, #200]	; (8001c90 <HAL_FLASHEx_Erase+0xdc>)
 8001bc8:	7e1b      	ldrb	r3, [r3, #24]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d101      	bne.n	8001bd2 <HAL_FLASHEx_Erase+0x1e>
 8001bce:	2302      	movs	r3, #2
 8001bd0:	e05a      	b.n	8001c88 <HAL_FLASHEx_Erase+0xd4>
 8001bd2:	4b2f      	ldr	r3, [pc, #188]	; (8001c90 <HAL_FLASHEx_Erase+0xdc>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bd8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bdc:	f7ff feaa 	bl	8001934 <FLASH_WaitForLastOperation>
 8001be0:	4603      	mov	r3, r0
 8001be2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001be4:	7bfb      	ldrb	r3, [r7, #15]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d14a      	bne.n	8001c80 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d117      	bne.n	8001c2a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	4619      	mov	r1, r3
 8001c06:	4610      	mov	r0, r2
 8001c08:	f000 f846 	bl	8001c98 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c10:	f7ff fe90 	bl	8001934 <FLASH_WaitForLastOperation>
 8001c14:	4603      	mov	r3, r0
 8001c16:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	; (8001c94 <HAL_FLASHEx_Erase+0xe0>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <HAL_FLASHEx_Erase+0xe0>)
 8001c1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001c22:	f023 0304 	bic.w	r3, r3, #4
 8001c26:	6113      	str	r3, [r2, #16]
 8001c28:	e028      	b.n	8001c7c <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	e01c      	b.n	8001c6c <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	68b8      	ldr	r0, [r7, #8]
 8001c3c:	f000 f866 	bl	8001d0c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c44:	f7ff fe76 	bl	8001934 <FLASH_WaitForLastOperation>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_FLASHEx_Erase+0xe0>)
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_FLASHEx_Erase+0xe0>)
 8001c52:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001c56:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	601a      	str	r2, [r3, #0]
          break;
 8001c64:	e00a      	b.n	8001c7c <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4413      	add	r3, r2
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d3da      	bcc.n	8001c32 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001c7c:	f000 f894 	bl	8001da8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_FLASHEx_Erase+0xdc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	761a      	strb	r2, [r3, #24]

  return status;
 8001c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000c3e0 	.word	0x2000c3e0
 8001c94:	40023c00 	.word	0x40023c00

08001c98 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	6039      	str	r1, [r7, #0]
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ca4:	4b18      	ldr	r3, [pc, #96]	; (8001d08 <FLASH_MassErase+0x70>)
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	4a17      	ldr	r2, [pc, #92]	; (8001d08 <FLASH_MassErase+0x70>)
 8001caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cae:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d108      	bne.n	8001cc8 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	6113      	str	r3, [r2, #16]
 8001cc6:	e00f      	b.n	8001ce8 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	4a0d      	ldr	r2, [pc, #52]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6113      	str	r3, [r2, #16]
 8001cda:	e005      	b.n	8001ce8 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <FLASH_MassErase+0x70>)
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce6:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	021b      	lsls	r3, r3, #8
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	4a05      	ldr	r2, [pc, #20]	; (8001d08 <FLASH_MassErase+0x70>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6113      	str	r3, [r2, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00

08001d0c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d102      	bne.n	8001d28 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	e010      	b.n	8001d4a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d103      	bne.n	8001d36 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001d2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	e009      	b.n	8001d4a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d103      	bne.n	8001d44 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001d3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e002      	b.n	8001d4a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001d44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d48:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b0b      	cmp	r3, #11
 8001d4e:	d902      	bls.n	8001d56 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3304      	adds	r3, #4
 8001d54:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d56:	4b13      	ldr	r3, [pc, #76]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d60:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d64:	691a      	ldr	r2, [r3, #16]
 8001d66:	490f      	ldr	r1, [pc, #60]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d74:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d78:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d7c:	691a      	ldr	r2, [r3, #16]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d86:	f043 0302 	orr.w	r3, r3, #2
 8001d8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <FLASH_Erase_Sector+0x98>)
 8001d92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d96:	6113      	str	r3, [r2, #16]
}
 8001d98:	bf00      	nop
 8001d9a:	3714      	adds	r7, #20
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	40023c00 	.word	0x40023c00

08001da8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001dac:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d017      	beq.n	8001de8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001db8:	4b1d      	ldr	r3, [pc, #116]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1c      	ldr	r2, [pc, #112]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001dc4:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001dda:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a13      	ldr	r2, [pc, #76]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001de6:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001df4:	4b0e      	ldr	r3, [pc, #56]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0d      	ldr	r2, [pc, #52]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001dfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001dfe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001e00:	4b0b      	ldr	r3, [pc, #44]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001e06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001e12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e16:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a04      	ldr	r2, [pc, #16]	; (8001e30 <FLASH_FlushCaches+0x88>)
 8001e1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e22:	6013      	str	r3, [r2, #0]
  }
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023c00 	.word	0x40023c00

08001e34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
 8001e4e:	e177      	b.n	8002140 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e50:	2201      	movs	r2, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4013      	ands	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	f040 8166 	bne.w	800213a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d005      	beq.n	8001e86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d130      	bne.n	8001ee8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	2203      	movs	r2, #3
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0201 	and.w	r2, r3, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d017      	beq.n	8001f24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d123      	bne.n	8001f78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	08da      	lsrs	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3208      	adds	r2, #8
 8001f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	08da      	lsrs	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3208      	adds	r2, #8
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0203 	and.w	r2, r3, #3
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80c0 	beq.w	800213a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b66      	ldr	r3, [pc, #408]	; (8002158 <HAL_GPIO_Init+0x324>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a65      	ldr	r2, [pc, #404]	; (8002158 <HAL_GPIO_Init+0x324>)
 8001fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b63      	ldr	r3, [pc, #396]	; (8002158 <HAL_GPIO_Init+0x324>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fd6:	4a61      	ldr	r2, [pc, #388]	; (800215c <HAL_GPIO_Init+0x328>)
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	3302      	adds	r3, #2
 8001fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	220f      	movs	r2, #15
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a58      	ldr	r2, [pc, #352]	; (8002160 <HAL_GPIO_Init+0x32c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d037      	beq.n	8002072 <HAL_GPIO_Init+0x23e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a57      	ldr	r2, [pc, #348]	; (8002164 <HAL_GPIO_Init+0x330>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d031      	beq.n	800206e <HAL_GPIO_Init+0x23a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a56      	ldr	r2, [pc, #344]	; (8002168 <HAL_GPIO_Init+0x334>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d02b      	beq.n	800206a <HAL_GPIO_Init+0x236>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a55      	ldr	r2, [pc, #340]	; (800216c <HAL_GPIO_Init+0x338>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d025      	beq.n	8002066 <HAL_GPIO_Init+0x232>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a54      	ldr	r2, [pc, #336]	; (8002170 <HAL_GPIO_Init+0x33c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01f      	beq.n	8002062 <HAL_GPIO_Init+0x22e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a53      	ldr	r2, [pc, #332]	; (8002174 <HAL_GPIO_Init+0x340>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d019      	beq.n	800205e <HAL_GPIO_Init+0x22a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a52      	ldr	r2, [pc, #328]	; (8002178 <HAL_GPIO_Init+0x344>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d013      	beq.n	800205a <HAL_GPIO_Init+0x226>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a51      	ldr	r2, [pc, #324]	; (800217c <HAL_GPIO_Init+0x348>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00d      	beq.n	8002056 <HAL_GPIO_Init+0x222>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a50      	ldr	r2, [pc, #320]	; (8002180 <HAL_GPIO_Init+0x34c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <HAL_GPIO_Init+0x21e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4f      	ldr	r2, [pc, #316]	; (8002184 <HAL_GPIO_Init+0x350>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_GPIO_Init+0x21a>
 800204a:	2309      	movs	r3, #9
 800204c:	e012      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800204e:	230a      	movs	r3, #10
 8002050:	e010      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002052:	2308      	movs	r3, #8
 8002054:	e00e      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002056:	2307      	movs	r3, #7
 8002058:	e00c      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800205a:	2306      	movs	r3, #6
 800205c:	e00a      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800205e:	2305      	movs	r3, #5
 8002060:	e008      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002062:	2304      	movs	r3, #4
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002066:	2303      	movs	r3, #3
 8002068:	e004      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800206a:	2302      	movs	r3, #2
 800206c:	e002      	b.n	8002074 <HAL_GPIO_Init+0x240>
 800206e:	2301      	movs	r3, #1
 8002070:	e000      	b.n	8002074 <HAL_GPIO_Init+0x240>
 8002072:	2300      	movs	r3, #0
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	f002 0203 	and.w	r2, r2, #3
 800207a:	0092      	lsls	r2, r2, #2
 800207c:	4093      	lsls	r3, r2
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002084:	4935      	ldr	r1, [pc, #212]	; (800215c <HAL_GPIO_Init+0x328>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	089b      	lsrs	r3, r3, #2
 800208a:	3302      	adds	r3, #2
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002092:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <HAL_GPIO_Init+0x354>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020b6:	4a34      	ldr	r2, [pc, #208]	; (8002188 <HAL_GPIO_Init+0x354>)
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020bc:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_GPIO_Init+0x354>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020e0:	4a29      	ldr	r2, [pc, #164]	; (8002188 <HAL_GPIO_Init+0x354>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_GPIO_Init+0x354>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800210a:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <HAL_GPIO_Init+0x354>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_GPIO_Init+0x354>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_GPIO_Init+0x354>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3301      	adds	r3, #1
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	2b0f      	cmp	r3, #15
 8002144:	f67f ae84 	bls.w	8001e50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002148:	bf00      	nop
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40013800 	.word	0x40013800
 8002160:	40020000 	.word	0x40020000
 8002164:	40020400 	.word	0x40020400
 8002168:	40020800 	.word	0x40020800
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40021000 	.word	0x40021000
 8002174:	40021400 	.word	0x40021400
 8002178:	40021800 	.word	0x40021800
 800217c:	40021c00 	.word	0x40021c00
 8002180:	40022000 	.word	0x40022000
 8002184:	40022400 	.word	0x40022400
 8002188:	40013c00 	.word	0x40013c00

0800218c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	807b      	strh	r3, [r7, #2]
 8002198:	4613      	mov	r3, r2
 800219a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021a2:	887a      	ldrh	r2, [r7, #2]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a8:	e003      	b.n	80021b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021aa:	887b      	ldrh	r3, [r7, #2]
 80021ac:	041a      	lsls	r2, r3, #16
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	619a      	str	r2, [r3, #24]
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	460b      	mov	r3, r1
 80021c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d0:	887a      	ldrh	r2, [r7, #2]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4013      	ands	r3, r2
 80021d6:	041a      	lsls	r2, r3, #16
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	43d9      	mvns	r1, r3
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	400b      	ands	r3, r1
 80021e0:	431a      	orrs	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	619a      	str	r2, [r3, #24]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e267      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d075      	beq.n	80022fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002212:	4b88      	ldr	r3, [pc, #544]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 030c 	and.w	r3, r3, #12
 800221a:	2b04      	cmp	r3, #4
 800221c:	d00c      	beq.n	8002238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221e:	4b85      	ldr	r3, [pc, #532]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002226:	2b08      	cmp	r3, #8
 8002228:	d112      	bne.n	8002250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800222a:	4b82      	ldr	r3, [pc, #520]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002236:	d10b      	bne.n	8002250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	4b7e      	ldr	r3, [pc, #504]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d05b      	beq.n	80022fc <HAL_RCC_OscConfig+0x108>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d157      	bne.n	80022fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e242      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x74>
 800225a:	4b76      	ldr	r3, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a75      	ldr	r2, [pc, #468]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e01d      	b.n	80022a4 <HAL_RCC_OscConfig+0xb0>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x98>
 8002272:	4b70      	ldr	r3, [pc, #448]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a6f      	ldr	r2, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a6c      	ldr	r2, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e00b      	b.n	80022a4 <HAL_RCC_OscConfig+0xb0>
 800228c:	4b69      	ldr	r3, [pc, #420]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a68      	ldr	r2, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b66      	ldr	r3, [pc, #408]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800229e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d013      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ac:	f7ff f90c 	bl	80014c8 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b4:	f7ff f908 	bl	80014c8 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e207      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	4b5b      	ldr	r3, [pc, #364]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0xc0>
 80022d2:	e014      	b.n	80022fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff f8f8 	bl	80014c8 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff f8f4 	bl	80014c8 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1f3      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	4b51      	ldr	r3, [pc, #324]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0xe8>
 80022fa:	e000      	b.n	80022fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d063      	beq.n	80023d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230a:	4b4a      	ldr	r3, [pc, #296]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00b      	beq.n	800232e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002316:	4b47      	ldr	r3, [pc, #284]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d11c      	bne.n	800235c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002322:	4b44      	ldr	r3, [pc, #272]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d116      	bne.n	800235c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800232e:	4b41      	ldr	r3, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d005      	beq.n	8002346 <HAL_RCC_OscConfig+0x152>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e1c7      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b3b      	ldr	r3, [pc, #236]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4937      	ldr	r1, [pc, #220]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235a:	e03a      	b.n	80023d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d020      	beq.n	80023a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002364:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_OscConfig+0x244>)
 8002366:	2201      	movs	r2, #1
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236a:	f7ff f8ad 	bl	80014c8 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002372:	f7ff f8a9 	bl	80014c8 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1a8      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	4b2b      	ldr	r3, [pc, #172]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d0f0      	beq.n	8002372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002390:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4925      	ldr	r1, [pc, #148]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	e015      	b.n	80023d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x244>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff f88c 	bl	80014c8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff f888 	bl	80014c8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e187      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d036      	beq.n	800244c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d016      	beq.n	8002414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <HAL_RCC_OscConfig+0x248>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff f86c 	bl	80014c8 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff f868 	bl	80014c8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e167      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x240>)
 8002408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x200>
 8002412:	e01b      	b.n	800244c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x248>)
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241a:	f7ff f855 	bl	80014c8 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	e00e      	b.n	8002440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002422:	f7ff f851 	bl	80014c8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d907      	bls.n	8002440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e150      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
 8002434:	40023800 	.word	0x40023800
 8002438:	42470000 	.word	0x42470000
 800243c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	4b88      	ldr	r3, [pc, #544]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ea      	bne.n	8002422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8097 	beq.w	8002588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800245a:	2300      	movs	r3, #0
 800245c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b81      	ldr	r3, [pc, #516]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
 800246e:	4b7d      	ldr	r3, [pc, #500]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a7c      	ldr	r2, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b7a      	ldr	r3, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	60bb      	str	r3, [r7, #8]
 8002484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002486:	2301      	movs	r3, #1
 8002488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	4b77      	ldr	r3, [pc, #476]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002492:	2b00      	cmp	r3, #0
 8002494:	d118      	bne.n	80024c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002496:	4b74      	ldr	r3, [pc, #464]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a73      	ldr	r2, [pc, #460]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 800249c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a2:	f7ff f811 	bl	80014c8 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024aa:	f7ff f80d 	bl	80014c8 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e10c      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024bc:	4b6a      	ldr	r3, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x474>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d106      	bne.n	80024de <HAL_RCC_OscConfig+0x2ea>
 80024d0:	4b64      	ldr	r3, [pc, #400]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	4a63      	ldr	r2, [pc, #396]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024d6:	f043 0301 	orr.w	r3, r3, #1
 80024da:	6713      	str	r3, [r2, #112]	; 0x70
 80024dc:	e01c      	b.n	8002518 <HAL_RCC_OscConfig+0x324>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2b05      	cmp	r3, #5
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x30c>
 80024e6:	4b5f      	ldr	r3, [pc, #380]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a5e      	ldr	r2, [pc, #376]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70
 80024f2:	4b5c      	ldr	r3, [pc, #368]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a5b      	ldr	r2, [pc, #364]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0x324>
 8002500:	4b58      	ldr	r3, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a57      	ldr	r2, [pc, #348]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	4b55      	ldr	r3, [pc, #340]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d015      	beq.n	800254c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002520:	f7fe ffd2 	bl	80014c8 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002526:	e00a      	b.n	800253e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002528:	f7fe ffce 	bl	80014c8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	f241 3288 	movw	r2, #5000	; 0x1388
 8002536:	4293      	cmp	r3, r2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e0cb      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0ee      	beq.n	8002528 <HAL_RCC_OscConfig+0x334>
 800254a:	e014      	b.n	8002576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe ffbc 	bl	80014c8 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002552:	e00a      	b.n	800256a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002554:	f7fe ffb8 	bl	80014c8 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002562:	4293      	cmp	r3, r2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0b5      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256a:	4b3e      	ldr	r3, [pc, #248]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800256c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1ee      	bne.n	8002554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d105      	bne.n	8002588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800257c:	4b39      	ldr	r3, [pc, #228]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	4a38      	ldr	r2, [pc, #224]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	f000 80a1 	beq.w	80026d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002592:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	2b08      	cmp	r3, #8
 800259c:	d05c      	beq.n	8002658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d141      	bne.n	800262a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_OscConfig+0x478>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ac:	f7fe ff8c 	bl	80014c8 <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025b4:	f7fe ff88 	bl	80014c8 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e087      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c6:	4b27      	ldr	r3, [pc, #156]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69da      	ldr	r2, [r3, #28]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	019b      	lsls	r3, r3, #6
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	3b01      	subs	r3, #1
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f4:	061b      	lsls	r3, r3, #24
 80025f6:	491b      	ldr	r1, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fc:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_OscConfig+0x478>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe ff61 	bl	80014c8 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260a:	f7fe ff5d 	bl	80014c8 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e05c      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x416>
 8002628:	e054      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262a:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCC_OscConfig+0x478>)
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe ff4a 	bl	80014c8 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe ff46 	bl	80014c8 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e045      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_OscConfig+0x470>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x444>
 8002656:	e03d      	b.n	80026d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d107      	bne.n	8002670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e038      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
 8002664:	40023800 	.word	0x40023800
 8002668:	40007000 	.word	0x40007000
 800266c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCC_OscConfig+0x4ec>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d028      	beq.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d121      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d11a      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026a0:	4013      	ands	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d111      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	085b      	lsrs	r3, r3, #1
 80026b8:	3b01      	subs	r3, #1
 80026ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026bc:	429a      	cmp	r2, r3
 80026be:	d107      	bne.n	80026d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d001      	beq.n	80026d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800

080026e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0cc      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026f8:	4b68      	ldr	r3, [pc, #416]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d90c      	bls.n	8002720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002706:	4b65      	ldr	r3, [pc, #404]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d044      	beq.n	8002804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d119      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800279e:	2b03      	cmp	r3, #3
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a2:	4b3f      	ldr	r3, [pc, #252]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e06f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b2:	4b3b      	ldr	r3, [pc, #236]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e067      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 0203 	bic.w	r2, r3, #3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4934      	ldr	r1, [pc, #208]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d4:	f7fe fe78 	bl	80014c8 <HAL_GetTick>
 80027d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027da:	e00a      	b.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027dc:	f7fe fe74 	bl	80014c8 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e04f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	4b2b      	ldr	r3, [pc, #172]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f003 020c 	and.w	r2, r3, #12
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	429a      	cmp	r2, r3
 8002802:	d1eb      	bne.n	80027dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002804:	4b25      	ldr	r3, [pc, #148]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d20c      	bcs.n	800282c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002856:	4b12      	ldr	r3, [pc, #72]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	; (80028a4 <HAL_RCC_ClockConfig+0x1c0>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	; (80028a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	; (80028ac <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fdd8 	bl	8001440 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08003bf4 	.word	0x08003bf4
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b090      	sub	sp, #64	; 0x40
 80028b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	637b      	str	r3, [r7, #52]	; 0x34
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028c0:	2300      	movs	r3, #0
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c8:	4b59      	ldr	r3, [pc, #356]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	f200 80a1 	bhi.w	8002a1c <HAL_RCC_GetSysClockFreq+0x16c>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x3a>
 80028e2:	e09b      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b53      	ldr	r3, [pc, #332]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x184>)
 80028e6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028e8:	e09b      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ea:	4b53      	ldr	r3, [pc, #332]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x188>)
 80028ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ee:	e098      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f0:	4b4f      	ldr	r3, [pc, #316]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028fa:	4b4d      	ldr	r3, [pc, #308]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d028      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b4a      	ldr	r3, [pc, #296]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	2200      	movs	r2, #0
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	627a      	str	r2, [r7, #36]	; 0x24
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002918:	2100      	movs	r1, #0
 800291a:	4b47      	ldr	r3, [pc, #284]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800291c:	fb03 f201 	mul.w	r2, r3, r1
 8002920:	2300      	movs	r3, #0
 8002922:	fb00 f303 	mul.w	r3, r0, r3
 8002926:	4413      	add	r3, r2
 8002928:	4a43      	ldr	r2, [pc, #268]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x188>)
 800292a:	fba0 1202 	umull	r1, r2, r0, r2
 800292e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002930:	460a      	mov	r2, r1
 8002932:	62ba      	str	r2, [r7, #40]	; 0x28
 8002934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002936:	4413      	add	r3, r2
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	2200      	movs	r2, #0
 800293e:	61bb      	str	r3, [r7, #24]
 8002940:	61fa      	str	r2, [r7, #28]
 8002942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002946:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800294a:	f7fd fc4f 	bl	80001ec <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4613      	mov	r3, r2
 8002954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002956:	e053      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b35      	ldr	r3, [pc, #212]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	617a      	str	r2, [r7, #20]
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800296a:	f04f 0b00 	mov.w	fp, #0
 800296e:	4652      	mov	r2, sl
 8002970:	465b      	mov	r3, fp
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	0159      	lsls	r1, r3, #5
 800297c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002980:	0150      	lsls	r0, r2, #5
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	ebb2 080a 	subs.w	r8, r2, sl
 800298a:	eb63 090b 	sbc.w	r9, r3, fp
 800298e:	f04f 0200 	mov.w	r2, #0
 8002992:	f04f 0300 	mov.w	r3, #0
 8002996:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800299a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800299e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80029a2:	ebb2 0408 	subs.w	r4, r2, r8
 80029a6:	eb63 0509 	sbc.w	r5, r3, r9
 80029aa:	f04f 0200 	mov.w	r2, #0
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	00eb      	lsls	r3, r5, #3
 80029b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029b8:	00e2      	lsls	r2, r4, #3
 80029ba:	4614      	mov	r4, r2
 80029bc:	461d      	mov	r5, r3
 80029be:	eb14 030a 	adds.w	r3, r4, sl
 80029c2:	603b      	str	r3, [r7, #0]
 80029c4:	eb45 030b 	adc.w	r3, r5, fp
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029d6:	4629      	mov	r1, r5
 80029d8:	028b      	lsls	r3, r1, #10
 80029da:	4621      	mov	r1, r4
 80029dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029e0:	4621      	mov	r1, r4
 80029e2:	028a      	lsls	r2, r1, #10
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ea:	2200      	movs	r2, #0
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	60fa      	str	r2, [r7, #12]
 80029f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f4:	f7fd fbfa 	bl	80001ec <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	0c1b      	lsrs	r3, r3, #16
 8002a06:	f003 0303 	and.w	r3, r3, #3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3740      	adds	r7, #64	; 0x40
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	017d7840 	.word	0x017d7840

08002a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a42:	681b      	ldr	r3, [r3, #0]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20000000 	.word	0x20000000

08002a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a58:	f7ff fff0 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	; (8002a74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	0a9b      	lsrs	r3, r3, #10
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	; (8002a78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	08003c04 	.word	0x08003c04

08002a7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a80:	f7ff ffdc 	bl	8002a3c <HAL_RCC_GetHCLKFreq>
 8002a84:	4602      	mov	r2, r0
 8002a86:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	0b5b      	lsrs	r3, r3, #13
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	4903      	ldr	r1, [pc, #12]	; (8002aa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a92:	5ccb      	ldrb	r3, [r1, r3]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	08003c04 	.word	0x08003c04

08002aa4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002aaa:	f7fe fd0d 	bl	80014c8 <HAL_GetTick>
 8002aae:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002ab0:	4b72      	ldr	r3, [pc, #456]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a71      	ldr	r2, [pc, #452]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abe:	f7fe fd03 	bl	80014c8 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0d0      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002ad0:	4b6a      	ldr	r3, [pc, #424]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d0f0      	beq.n	8002abe <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002adc:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a66      	ldr	r2, [pc, #408]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ae8:	f7fe fcee 	bl	80014c8 <HAL_GetTick>
 8002aec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002aee:	4b63      	ldr	r3, [pc, #396]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002af4:	e00a      	b.n	8002b0c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af6:	f7fe fce7 	bl	80014c8 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e0b2      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002b0c:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 030c 	and.w	r3, r3, #12
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ee      	bne.n	8002af6 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b18:	f7fe fcd6 	bl	80014c8 <HAL_GetTick>
 8002b1c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002b1e:	4b57      	ldr	r3, [pc, #348]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b24:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002b28:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe fccc 	bl	80014c8 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	; 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e099      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b4a:	f7fe fcbd 	bl	80014c8 <HAL_GetTick>
 8002b4e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002b50:	4b4a      	ldr	r3, [pc, #296]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a49      	ldr	r2, [pc, #292]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b5a:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5e:	f7fe fcb3 	bl	80014c8 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e080      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002b70:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1f0      	bne.n	8002b5e <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002b7c:	f7fe fca4 	bl	80014c8 <HAL_GetTick>
 8002b80:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002b82:	4b3e      	ldr	r3, [pc, #248]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3d      	ldr	r2, [pc, #244]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002b88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b8c:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b90:	f7fe fc9a 	bl	80014c8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e067      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002ba2:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_DeInit+0xec>
  }
#endif /* RCC_PLLI2S_SUPPORT */

#if defined(RCC_PLLSAI_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002bae:	f7fe fc8b 	bl	80014c8 <HAL_GetTick>
 8002bb2:	6078      	str	r0, [r7, #4]

  /* Reset PLLSAI bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
 8002bb4:	4b31      	ldr	r3, [pc, #196]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a30      	ldr	r2, [pc, #192]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]

  /* Wait till PLLSAI is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002bc0:	e008      	b.n	8002bd4 <HAL_RCC_DeInit+0x130>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bc2:	f7fe fc81 	bl	80014c8 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d901      	bls.n	8002bd4 <HAL_RCC_DeInit+0x130>
    {
      return HAL_TIMEOUT;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e04e      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
 8002bd4:	4b29      	ldr	r3, [pc, #164]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f0      	bne.n	8002bc2 <HAL_RCC_DeInit+0x11e>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002be2:	4a27      	ldr	r2, [pc, #156]	; (8002c80 <HAL_RCC_DeInit+0x1dc>)
 8002be4:	605a      	str	r2, [r3, #4]
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002be6:	4b25      	ldr	r3, [pc, #148]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <HAL_RCC_DeInit+0x1e0>)
 8002bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */

  /* Reset PLLSAICFGR register */
#if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
 8002bee:	4b23      	ldr	r3, [pc, #140]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_RCC_DeInit+0x1e0>)
 8002bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002bf6:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002bfc:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002c00:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002c02:	4b1e      	ldr	r3, [pc, #120]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4a1d      	ldr	r2, [pc, #116]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYIE */

#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	4a1a      	ldr	r2, [pc, #104]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c18:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002c1a:	4b18      	ldr	r3, [pc, #96]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	4a17      	ldr	r2, [pc, #92]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c20:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002c24:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002c26:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	4a14      	ldr	r2, [pc, #80]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002c30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLI2SRDYC */

#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
 8002c32:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a11      	ldr	r2, [pc, #68]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c3e:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002c4a:	4b0c      	ldr	r3, [pc, #48]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4e:	4a0b      	ldr	r2, [pc, #44]	; (8002c7c <HAL_RCC_DeInit+0x1d8>)
 8002c50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c54:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002c56:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_RCC_DeInit+0x1e4>)
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_RCC_DeInit+0x1e8>)
 8002c5a:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <HAL_RCC_DeInit+0x1ec>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe fbed 	bl	8001440 <HAL_InitTick>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_DeInit+0x1cc>
  {
    return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_RCC_DeInit+0x1ce>
  }
  else
  {
    return HAL_OK;
 8002c70:	2300      	movs	r3, #0
  }
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	04003010 	.word	0x04003010
 8002c84:	24003000 	.word	0x24003000
 8002c88:	20000000 	.word	0x20000000
 8002c8c:	00f42400 	.word	0x00f42400
 8002c90:	20000004 	.word	0x20000004

08002c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e03f      	b.n	8002d26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7fe fac4 	bl	8001248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2224      	movs	r2, #36	; 0x24
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fcdf 	bl	800369c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2220      	movs	r2, #32
 8002d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b084      	sub	sp, #16
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d11d      	bne.n	8002d84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <HAL_UART_Receive_IT+0x26>
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e016      	b.n	8002d86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_UART_Receive_IT+0x38>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e00f      	b.n	8002d86 <HAL_UART_Receive_IT+0x58>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	461a      	mov	r2, r3
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fab6 	bl	80032ec <UART_Start_Receive_IT>
 8002d80:	4603      	mov	r3, r0
 8002d82:	e000      	b.n	8002d86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
	...

08002d90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0ba      	sub	sp, #232	; 0xe8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002dce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <HAL_UART_IRQHandler+0x66>
 8002de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 fb99 	bl	8003526 <UART_Receive_IT>
      return;
 8002df4:	e256      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002df6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80de 	beq.w	8002fbc <HAL_UART_IRQHandler+0x22c>
 8002e00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d106      	bne.n	8002e1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80d1 	beq.w	8002fbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_UART_IRQHandler+0xae>
 8002e26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f043 0201 	orr.w	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <HAL_UART_IRQHandler+0xd2>
 8002e4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d005      	beq.n	8002e62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	f043 0202 	orr.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00b      	beq.n	8002e86 <HAL_UART_IRQHandler+0xf6>
 8002e6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e8a:	f003 0308 	and.w	r3, r3, #8
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d011      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x126>
 8002e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	f043 0208 	orr.w	r2, r3, #8
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 81ed 	beq.w	800329a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_UART_IRQHandler+0x14e>
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fb24 	bl	8003526 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_UART_IRQHandler+0x17a>
 8002f02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d04f      	beq.n	8002faa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa2c 	bl	8003368 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1a:	2b40      	cmp	r3, #64	; 0x40
 8002f1c:	d141      	bne.n	8002fa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3314      	adds	r3, #20
 8002f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3314      	adds	r3, #20
 8002f46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002f4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002f56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002f62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1d9      	bne.n	8002f1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d013      	beq.n	8002f9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f76:	4a7d      	ldr	r2, [pc, #500]	; (800316c <HAL_UART_IRQHandler+0x3dc>)
 8002f78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fe fc2f 	bl	80017e2 <HAL_DMA_Abort_IT>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d016      	beq.n	8002fb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f94:	4610      	mov	r0, r2
 8002f96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	e00e      	b.n	8002fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f990 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa0:	e00a      	b.n	8002fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f98c 	bl	80032c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fa8:	e006      	b.n	8002fb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f988 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002fb6:	e170      	b.n	800329a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	bf00      	nop
    return;
 8002fba:	e16e      	b.n	800329a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	f040 814a 	bne.w	800325a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f000 8143 	beq.w	800325a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 813c 	beq.w	800325a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60bb      	str	r3, [r7, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	60bb      	str	r3, [r7, #8]
 8002ff6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003002:	2b40      	cmp	r3, #64	; 0x40
 8003004:	f040 80b4 	bne.w	8003170 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003014:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8140 	beq.w	800329e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003022:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003026:	429a      	cmp	r2, r3
 8003028:	f080 8139 	bcs.w	800329e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003032:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800303e:	f000 8088 	beq.w	8003152 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003050:	e853 3f00 	ldrex	r3, [r3]
 8003054:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003058:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800305c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003060:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800306e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003076:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800307a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800307e:	e841 2300 	strex	r3, r2, [r1]
 8003082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1d9      	bne.n	8003042 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	3314      	adds	r3, #20
 8003094:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003098:	e853 3f00 	ldrex	r3, [r3]
 800309c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800309e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030a0:	f023 0301 	bic.w	r3, r3, #1
 80030a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80030b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80030ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80030c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e1      	bne.n	800308e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	3314      	adds	r3, #20
 80030d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d4:	e853 3f00 	ldrex	r3, [r3]
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80030da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3314      	adds	r3, #20
 80030ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80030f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80030f6:	e841 2300 	strex	r3, r2, [r1]
 80030fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80030fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1e3      	bne.n	80030ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	330c      	adds	r3, #12
 8003116:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800311a:	e853 3f00 	ldrex	r3, [r3]
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003122:	f023 0310 	bic.w	r3, r3, #16
 8003126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003134:	65ba      	str	r2, [r7, #88]	; 0x58
 8003136:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003138:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800313a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800313c:	e841 2300 	strex	r3, r2, [r1]
 8003140:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1e3      	bne.n	8003110 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	4618      	mov	r0, r3
 800314e:	f7fe fad8 	bl	8001702 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800315a:	b29b      	uxth	r3, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29b      	uxth	r3, r3
 8003160:	4619      	mov	r1, r3
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f8b6 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003168:	e099      	b.n	800329e <HAL_UART_IRQHandler+0x50e>
 800316a:	bf00      	nop
 800316c:	0800342f 	.word	0x0800342f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003178:	b29b      	uxth	r3, r3
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 808b 	beq.w	80032a2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800318c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 8086 	beq.w	80032a2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	330c      	adds	r3, #12
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80031ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80031ba:	647a      	str	r2, [r7, #68]	; 0x44
 80031bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e3      	bne.n	8003196 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	623b      	str	r3, [r7, #32]
   return(result);
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f023 0301 	bic.w	r3, r3, #1
 80031e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3314      	adds	r3, #20
 80031ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80031f2:	633a      	str	r2, [r7, #48]	; 0x30
 80031f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fa:	e841 2300 	strex	r3, r2, [r1]
 80031fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1e3      	bne.n	80031ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	330c      	adds	r3, #12
 800321a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	e853 3f00 	ldrex	r3, [r3]
 8003222:	60fb      	str	r3, [r7, #12]
   return(result);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f023 0310 	bic.w	r3, r3, #16
 800322a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003238:	61fa      	str	r2, [r7, #28]
 800323a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	617b      	str	r3, [r7, #20]
   return(result);
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e3      	bne.n	8003214 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800324c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f83e 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003258:	e023      	b.n	80032a2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800325a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_UART_IRQHandler+0x4ea>
 8003266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800326a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 f8ef 	bl	8003456 <UART_Transmit_IT>
    return;
 8003278:	e014      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800327a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800327e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <HAL_UART_IRQHandler+0x514>
 8003286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800328a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f92f 	bl	80034f6 <UART_EndTransmit_IT>
    return;
 8003298:	e004      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
    return;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
      return;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_UART_IRQHandler+0x514>
      return;
 80032a2:	bf00      	nop
  }
}
 80032a4:	37e8      	adds	r7, #232	; 0xe8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop

080032ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	4613      	mov	r3, r2
 80032f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	88fa      	ldrh	r2, [r7, #6]
 800330a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2222      	movs	r2, #34	; 0x22
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d007      	beq.n	800333a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	68da      	ldr	r2, [r3, #12]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003338:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695a      	ldr	r2, [r3, #20]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0201 	orr.w	r2, r2, #1
 8003348:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f042 0220 	orr.w	r2, r2, #32
 8003358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b095      	sub	sp, #84	; 0x54
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	330c      	adds	r3, #12
 8003376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800337a:	e853 3f00 	ldrex	r3, [r3]
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003390:	643a      	str	r2, [r7, #64]	; 0x40
 8003392:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003398:	e841 2300 	strex	r3, r2, [r1]
 800339c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800339e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1e5      	bne.n	8003370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3314      	adds	r3, #20
 80033aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ac:	6a3b      	ldr	r3, [r7, #32]
 80033ae:	e853 3f00 	ldrex	r3, [r3]
 80033b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033cc:	e841 2300 	strex	r3, r2, [r1]
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1e5      	bne.n	80033a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d119      	bne.n	8003414 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	330c      	adds	r3, #12
 80033e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	647b      	str	r3, [r7, #68]	; 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	330c      	adds	r3, #12
 80033fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003400:	61ba      	str	r2, [r7, #24]
 8003402:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003404:	6979      	ldr	r1, [r7, #20]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	e841 2300 	strex	r3, r2, [r1]
 800340c:	613b      	str	r3, [r7, #16]
   return(result);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e5      	bne.n	80033e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003422:	bf00      	nop
 8003424:	3754      	adds	r7, #84	; 0x54
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b084      	sub	sp, #16
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f7ff ff39 	bl	80032c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800344e:	bf00      	nop
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b21      	cmp	r3, #33	; 0x21
 8003468:	d13e      	bne.n	80034e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003472:	d114      	bne.n	800349e <UART_Transmit_IT+0x48>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d110      	bne.n	800349e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	881b      	ldrh	r3, [r3, #0]
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003490:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	1c9a      	adds	r2, r3, #2
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	621a      	str	r2, [r3, #32]
 800349c:	e008      	b.n	80034b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	1c59      	adds	r1, r3, #1
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6211      	str	r1, [r2, #32]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	3b01      	subs	r3, #1
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	4619      	mov	r1, r3
 80034be:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10f      	bne.n	80034e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	e000      	b.n	80034ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80034e8:	2302      	movs	r3, #2
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b082      	sub	sp, #8
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800350c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7ff fec8 	bl	80032ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b08c      	sub	sp, #48	; 0x30
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b22      	cmp	r3, #34	; 0x22
 8003538:	f040 80ab 	bne.w	8003692 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003544:	d117      	bne.n	8003576 <UART_Receive_IT+0x50>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d113      	bne.n	8003576 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	b29b      	uxth	r3, r3
 8003560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003564:	b29a      	uxth	r2, r3
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356e:	1c9a      	adds	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	; 0x28
 8003574:	e026      	b.n	80035c4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800357c:	2300      	movs	r3, #0
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003588:	d007      	beq.n	800359a <UART_Receive_IT+0x74>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10a      	bne.n	80035a8 <UART_Receive_IT+0x82>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	e008      	b.n	80035ba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	1c5a      	adds	r2, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	3b01      	subs	r3, #1
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4619      	mov	r1, r3
 80035d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d15a      	bne.n	800368e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0220 	bic.w	r2, r2, #32
 80035e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b01      	cmp	r3, #1
 8003616:	d135      	bne.n	8003684 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	e853 3f00 	ldrex	r3, [r3]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f023 0310 	bic.w	r3, r3, #16
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	330c      	adds	r3, #12
 800363c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363e:	623a      	str	r2, [r7, #32]
 8003640:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	69f9      	ldr	r1, [r7, #28]
 8003644:	6a3a      	ldr	r2, [r7, #32]
 8003646:	e841 2300 	strex	r3, r2, [r1]
 800364a:	61bb      	str	r3, [r7, #24]
   return(result);
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1e5      	bne.n	800361e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0310 	and.w	r3, r3, #16
 800365c:	2b10      	cmp	r3, #16
 800365e:	d10a      	bne.n	8003676 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003660:	2300      	movs	r3, #0
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	60fb      	str	r3, [r7, #12]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	60fb      	str	r3, [r7, #12]
 8003674:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800367a:	4619      	mov	r1, r3
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff fe29 	bl	80032d4 <HAL_UARTEx_RxEventCallback>
 8003682:	e002      	b.n	800368a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7fd fe3d 	bl	8001304 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800368a:	2300      	movs	r3, #0
 800368c:	e002      	b.n	8003694 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800368e:	2300      	movs	r3, #0
 8003690:	e000      	b.n	8003694 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003692:	2302      	movs	r3, #2
  }
}
 8003694:	4618      	mov	r0, r3
 8003696:	3730      	adds	r7, #48	; 0x30
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b0c0      	sub	sp, #256	; 0x100
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80036b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036b8:	68d9      	ldr	r1, [r3, #12]
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	ea40 0301 	orr.w	r3, r0, r1
 80036c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	431a      	orrs	r2, r3
 80036d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	431a      	orrs	r2, r3
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80036e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80036f4:	f021 010c 	bic.w	r1, r1, #12
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003702:	430b      	orrs	r3, r1
 8003704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003716:	6999      	ldr	r1, [r3, #24]
 8003718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	ea40 0301 	orr.w	r3, r0, r1
 8003722:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b8f      	ldr	r3, [pc, #572]	; (8003968 <UART_SetConfig+0x2cc>)
 800372c:	429a      	cmp	r2, r3
 800372e:	d005      	beq.n	800373c <UART_SetConfig+0xa0>
 8003730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	4b8d      	ldr	r3, [pc, #564]	; (800396c <UART_SetConfig+0x2d0>)
 8003738:	429a      	cmp	r2, r3
 800373a:	d104      	bne.n	8003746 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800373c:	f7ff f99e 	bl	8002a7c <HAL_RCC_GetPCLK2Freq>
 8003740:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003744:	e003      	b.n	800374e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003746:	f7ff f985 	bl	8002a54 <HAL_RCC_GetPCLK1Freq>
 800374a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003758:	f040 810c 	bne.w	8003974 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800375c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003760:	2200      	movs	r2, #0
 8003762:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003766:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800376a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800376e:	4622      	mov	r2, r4
 8003770:	462b      	mov	r3, r5
 8003772:	1891      	adds	r1, r2, r2
 8003774:	65b9      	str	r1, [r7, #88]	; 0x58
 8003776:	415b      	adcs	r3, r3
 8003778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800377a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800377e:	4621      	mov	r1, r4
 8003780:	eb12 0801 	adds.w	r8, r2, r1
 8003784:	4629      	mov	r1, r5
 8003786:	eb43 0901 	adc.w	r9, r3, r1
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003796:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800379a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800379e:	4690      	mov	r8, r2
 80037a0:	4699      	mov	r9, r3
 80037a2:	4623      	mov	r3, r4
 80037a4:	eb18 0303 	adds.w	r3, r8, r3
 80037a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037ac:	462b      	mov	r3, r5
 80037ae:	eb49 0303 	adc.w	r3, r9, r3
 80037b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80037c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80037c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80037ca:	460b      	mov	r3, r1
 80037cc:	18db      	adds	r3, r3, r3
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
 80037d0:	4613      	mov	r3, r2
 80037d2:	eb42 0303 	adc.w	r3, r2, r3
 80037d6:	657b      	str	r3, [r7, #84]	; 0x54
 80037d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80037dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80037e0:	f7fc fd04 	bl	80001ec <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4b61      	ldr	r3, [pc, #388]	; (8003970 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2302 	umull	r2, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	011c      	lsls	r4, r3, #4
 80037f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f6:	2200      	movs	r2, #0
 80037f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003800:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003804:	4642      	mov	r2, r8
 8003806:	464b      	mov	r3, r9
 8003808:	1891      	adds	r1, r2, r2
 800380a:	64b9      	str	r1, [r7, #72]	; 0x48
 800380c:	415b      	adcs	r3, r3
 800380e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003810:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003814:	4641      	mov	r1, r8
 8003816:	eb12 0a01 	adds.w	sl, r2, r1
 800381a:	4649      	mov	r1, r9
 800381c:	eb43 0b01 	adc.w	fp, r3, r1
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	f04f 0300 	mov.w	r3, #0
 8003828:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800382c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003830:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003834:	4692      	mov	sl, r2
 8003836:	469b      	mov	fp, r3
 8003838:	4643      	mov	r3, r8
 800383a:	eb1a 0303 	adds.w	r3, sl, r3
 800383e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003842:	464b      	mov	r3, r9
 8003844:	eb4b 0303 	adc.w	r3, fp, r3
 8003848:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003858:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800385c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003860:	460b      	mov	r3, r1
 8003862:	18db      	adds	r3, r3, r3
 8003864:	643b      	str	r3, [r7, #64]	; 0x40
 8003866:	4613      	mov	r3, r2
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	647b      	str	r3, [r7, #68]	; 0x44
 800386e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003872:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003876:	f7fc fcb9 	bl	80001ec <__aeabi_uldivmod>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4611      	mov	r1, r2
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <UART_SetConfig+0x2d4>)
 8003882:	fba3 2301 	umull	r2, r3, r3, r1
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2264      	movs	r2, #100	; 0x64
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	1acb      	subs	r3, r1, r3
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003896:	4b36      	ldr	r3, [pc, #216]	; (8003970 <UART_SetConfig+0x2d4>)
 8003898:	fba3 2302 	umull	r2, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80038a4:	441c      	add	r4, r3
 80038a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038aa:	2200      	movs	r2, #0
 80038ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80038b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80038b8:	4642      	mov	r2, r8
 80038ba:	464b      	mov	r3, r9
 80038bc:	1891      	adds	r1, r2, r2
 80038be:	63b9      	str	r1, [r7, #56]	; 0x38
 80038c0:	415b      	adcs	r3, r3
 80038c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80038c8:	4641      	mov	r1, r8
 80038ca:	1851      	adds	r1, r2, r1
 80038cc:	6339      	str	r1, [r7, #48]	; 0x30
 80038ce:	4649      	mov	r1, r9
 80038d0:	414b      	adcs	r3, r1
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80038e0:	4659      	mov	r1, fp
 80038e2:	00cb      	lsls	r3, r1, #3
 80038e4:	4651      	mov	r1, sl
 80038e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038ea:	4651      	mov	r1, sl
 80038ec:	00ca      	lsls	r2, r1, #3
 80038ee:	4610      	mov	r0, r2
 80038f0:	4619      	mov	r1, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	4642      	mov	r2, r8
 80038f6:	189b      	adds	r3, r3, r2
 80038f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038fc:	464b      	mov	r3, r9
 80038fe:	460a      	mov	r2, r1
 8003900:	eb42 0303 	adc.w	r3, r2, r3
 8003904:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003914:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003918:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800391c:	460b      	mov	r3, r1
 800391e:	18db      	adds	r3, r3, r3
 8003920:	62bb      	str	r3, [r7, #40]	; 0x28
 8003922:	4613      	mov	r3, r2
 8003924:	eb42 0303 	adc.w	r3, r2, r3
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800392a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800392e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003932:	f7fc fc5b 	bl	80001ec <__aeabi_uldivmod>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <UART_SetConfig+0x2d4>)
 800393c:	fba3 1302 	umull	r1, r3, r3, r2
 8003940:	095b      	lsrs	r3, r3, #5
 8003942:	2164      	movs	r1, #100	; 0x64
 8003944:	fb01 f303 	mul.w	r3, r1, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	3332      	adds	r3, #50	; 0x32
 800394e:	4a08      	ldr	r2, [pc, #32]	; (8003970 <UART_SetConfig+0x2d4>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	095b      	lsrs	r3, r3, #5
 8003956:	f003 0207 	and.w	r2, r3, #7
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4422      	add	r2, r4
 8003962:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003964:	e106      	b.n	8003b74 <UART_SetConfig+0x4d8>
 8003966:	bf00      	nop
 8003968:	40011000 	.word	0x40011000
 800396c:	40011400 	.word	0x40011400
 8003970:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800397e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003982:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003986:	4642      	mov	r2, r8
 8003988:	464b      	mov	r3, r9
 800398a:	1891      	adds	r1, r2, r2
 800398c:	6239      	str	r1, [r7, #32]
 800398e:	415b      	adcs	r3, r3
 8003990:	627b      	str	r3, [r7, #36]	; 0x24
 8003992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003996:	4641      	mov	r1, r8
 8003998:	1854      	adds	r4, r2, r1
 800399a:	4649      	mov	r1, r9
 800399c:	eb43 0501 	adc.w	r5, r3, r1
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	00eb      	lsls	r3, r5, #3
 80039aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039ae:	00e2      	lsls	r2, r4, #3
 80039b0:	4614      	mov	r4, r2
 80039b2:	461d      	mov	r5, r3
 80039b4:	4643      	mov	r3, r8
 80039b6:	18e3      	adds	r3, r4, r3
 80039b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039bc:	464b      	mov	r3, r9
 80039be:	eb45 0303 	adc.w	r3, r5, r3
 80039c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039e2:	4629      	mov	r1, r5
 80039e4:	008b      	lsls	r3, r1, #2
 80039e6:	4621      	mov	r1, r4
 80039e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039ec:	4621      	mov	r1, r4
 80039ee:	008a      	lsls	r2, r1, #2
 80039f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039f4:	f7fc fbfa 	bl	80001ec <__aeabi_uldivmod>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4b60      	ldr	r3, [pc, #384]	; (8003b80 <UART_SetConfig+0x4e4>)
 80039fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	011c      	lsls	r4, r3, #4
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	61b9      	str	r1, [r7, #24]
 8003a20:	415b      	adcs	r3, r3
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a28:	4641      	mov	r1, r8
 8003a2a:	1851      	adds	r1, r2, r1
 8003a2c:	6139      	str	r1, [r7, #16]
 8003a2e:	4649      	mov	r1, r9
 8003a30:	414b      	adcs	r3, r1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a40:	4659      	mov	r1, fp
 8003a42:	00cb      	lsls	r3, r1, #3
 8003a44:	4651      	mov	r1, sl
 8003a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	00ca      	lsls	r2, r1, #3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	4642      	mov	r2, r8
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	460a      	mov	r2, r1
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	f04f 0300 	mov.w	r3, #0
 8003a7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003a80:	4649      	mov	r1, r9
 8003a82:	008b      	lsls	r3, r1, #2
 8003a84:	4641      	mov	r1, r8
 8003a86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a8a:	4641      	mov	r1, r8
 8003a8c:	008a      	lsls	r2, r1, #2
 8003a8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003a92:	f7fc fbab 	bl	80001ec <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4b38      	ldr	r3, [pc, #224]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003a9e:	fba3 2301 	umull	r2, r3, r3, r1
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	2264      	movs	r2, #100	; 0x64
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	1acb      	subs	r3, r1, r3
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	3332      	adds	r3, #50	; 0x32
 8003ab0:	4a33      	ldr	r2, [pc, #204]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	095b      	lsrs	r3, r3, #5
 8003ab8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003abc:	441c      	add	r4, r3
 8003abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	673b      	str	r3, [r7, #112]	; 0x70
 8003ac6:	677a      	str	r2, [r7, #116]	; 0x74
 8003ac8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	1891      	adds	r1, r2, r2
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	415b      	adcs	r3, r3
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003adc:	4641      	mov	r1, r8
 8003ade:	1851      	adds	r1, r2, r1
 8003ae0:	6039      	str	r1, [r7, #0]
 8003ae2:	4649      	mov	r1, r9
 8003ae4:	414b      	adcs	r3, r1
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003af4:	4659      	mov	r1, fp
 8003af6:	00cb      	lsls	r3, r1, #3
 8003af8:	4651      	mov	r1, sl
 8003afa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003afe:	4651      	mov	r1, sl
 8003b00:	00ca      	lsls	r2, r1, #3
 8003b02:	4610      	mov	r0, r2
 8003b04:	4619      	mov	r1, r3
 8003b06:	4603      	mov	r3, r0
 8003b08:	4642      	mov	r2, r8
 8003b0a:	189b      	adds	r3, r3, r2
 8003b0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b0e:	464b      	mov	r3, r9
 8003b10:	460a      	mov	r2, r1
 8003b12:	eb42 0303 	adc.w	r3, r2, r3
 8003b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
 8003b22:	667a      	str	r2, [r7, #100]	; 0x64
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003b30:	4649      	mov	r1, r9
 8003b32:	008b      	lsls	r3, r1, #2
 8003b34:	4641      	mov	r1, r8
 8003b36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	008a      	lsls	r2, r1, #2
 8003b3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003b42:	f7fc fb53 	bl	80001ec <__aeabi_uldivmod>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <UART_SetConfig+0x4e4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 020f 	and.w	r2, r3, #15
 8003b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4422      	add	r2, r4
 8003b72:	609a      	str	r2, [r3, #8]
}
 8003b74:	bf00      	nop
 8003b76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b80:	51eb851f 	.word	0x51eb851f

08003b84 <memset>:
 8003b84:	4402      	add	r2, r0
 8003b86:	4603      	mov	r3, r0
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d100      	bne.n	8003b8e <memset+0xa>
 8003b8c:	4770      	bx	lr
 8003b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b92:	e7f9      	b.n	8003b88 <memset+0x4>

08003b94 <__libc_init_array>:
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	4d0d      	ldr	r5, [pc, #52]	; (8003bcc <__libc_init_array+0x38>)
 8003b98:	4c0d      	ldr	r4, [pc, #52]	; (8003bd0 <__libc_init_array+0x3c>)
 8003b9a:	1b64      	subs	r4, r4, r5
 8003b9c:	10a4      	asrs	r4, r4, #2
 8003b9e:	2600      	movs	r6, #0
 8003ba0:	42a6      	cmp	r6, r4
 8003ba2:	d109      	bne.n	8003bb8 <__libc_init_array+0x24>
 8003ba4:	4d0b      	ldr	r5, [pc, #44]	; (8003bd4 <__libc_init_array+0x40>)
 8003ba6:	4c0c      	ldr	r4, [pc, #48]	; (8003bd8 <__libc_init_array+0x44>)
 8003ba8:	f000 f818 	bl	8003bdc <_init>
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	2600      	movs	r6, #0
 8003bb2:	42a6      	cmp	r6, r4
 8003bb4:	d105      	bne.n	8003bc2 <__libc_init_array+0x2e>
 8003bb6:	bd70      	pop	{r4, r5, r6, pc}
 8003bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bbc:	4798      	blx	r3
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7ee      	b.n	8003ba0 <__libc_init_array+0xc>
 8003bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc6:	4798      	blx	r3
 8003bc8:	3601      	adds	r6, #1
 8003bca:	e7f2      	b.n	8003bb2 <__libc_init_array+0x1e>
 8003bcc:	08003c14 	.word	0x08003c14
 8003bd0:	08003c14 	.word	0x08003c14
 8003bd4:	08003c14 	.word	0x08003c14
 8003bd8:	08003c18 	.word	0x08003c18

08003bdc <_init>:
 8003bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bde:	bf00      	nop
 8003be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003be2:	bc08      	pop	{r3}
 8003be4:	469e      	mov	lr, r3
 8003be6:	4770      	bx	lr

08003be8 <_fini>:
 8003be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bea:	bf00      	nop
 8003bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bee:	bc08      	pop	{r3}
 8003bf0:	469e      	mov	lr, r3
 8003bf2:	4770      	bx	lr
